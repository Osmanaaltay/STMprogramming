
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080031c4  080031c4  000041c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003288  08003288  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003288  08003288  00004288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003290  08003290  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003290  08003290  00004290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003294  08003294  00004294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003298  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  080032f4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080032f4  00005268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008182  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015c1  00000000  00000000  0000d207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0000e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000628  00000000  00000000  0000efd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d4f  00000000  00000000  0000f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a36c  00000000  00000000  00026347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fe6  00000000  00000000  000306b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2699  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000269c  00000000  00000000  000b26dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000b4d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080031ac 	.word	0x080031ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080031ac 	.word	0x080031ac

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ae:	2afd      	cmp	r2, #253	@ 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	@ 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_frsub>:
 80002c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__addsf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_fsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002d0 <__addsf3>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	bf1f      	itttt	ne
 80002d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d8:	ea92 0f03 	teqne	r2, r3
 80002dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e4:	d06a      	beq.n	80003bc <__addsf3+0xec>
 80002e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ee:	bfc1      	itttt	gt
 80002f0:	18d2      	addgt	r2, r2, r3
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	4048      	eorgt	r0, r1
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	bfb8      	it	lt
 80002fa:	425b      	neglt	r3, r3
 80002fc:	2b19      	cmp	r3, #25
 80002fe:	bf88      	it	hi
 8000300:	4770      	bxhi	lr
 8000302:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000306:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4240      	negne	r0, r0
 8000312:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000316:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800031a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800031e:	bf18      	it	ne
 8000320:	4249      	negne	r1, r1
 8000322:	ea92 0f03 	teq	r2, r3
 8000326:	d03f      	beq.n	80003a8 <__addsf3+0xd8>
 8000328:	f1a2 0201 	sub.w	r2, r2, #1
 800032c:	fa41 fc03 	asr.w	ip, r1, r3
 8000330:	eb10 000c 	adds.w	r0, r0, ip
 8000334:	f1c3 0320 	rsb	r3, r3, #32
 8000338:	fa01 f103 	lsl.w	r1, r1, r3
 800033c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000340:	d502      	bpl.n	8000348 <__addsf3+0x78>
 8000342:	4249      	negs	r1, r1
 8000344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000348:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800034c:	d313      	bcc.n	8000376 <__addsf3+0xa6>
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000352:	d306      	bcc.n	8000362 <__addsf3+0x92>
 8000354:	0840      	lsrs	r0, r0, #1
 8000356:	ea4f 0131 	mov.w	r1, r1, rrx
 800035a:	f102 0201 	add.w	r2, r2, #1
 800035e:	2afe      	cmp	r2, #254	@ 0xfe
 8000360:	d251      	bcs.n	8000406 <__addsf3+0x136>
 8000362:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036a:	bf08      	it	eq
 800036c:	f020 0001 	biceq.w	r0, r0, #1
 8000370:	ea40 0003 	orr.w	r0, r0, r3
 8000374:	4770      	bx	lr
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	eb40 0000 	adc.w	r0, r0, r0
 800037c:	3a01      	subs	r2, #1
 800037e:	bf28      	it	cs
 8000380:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000384:	d2ed      	bcs.n	8000362 <__addsf3+0x92>
 8000386:	fab0 fc80 	clz	ip, r0
 800038a:	f1ac 0c08 	sub.w	ip, ip, #8
 800038e:	ebb2 020c 	subs.w	r2, r2, ip
 8000392:	fa00 f00c 	lsl.w	r0, r0, ip
 8000396:	bfaa      	itet	ge
 8000398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800039c:	4252      	neglt	r2, r2
 800039e:	4318      	orrge	r0, r3
 80003a0:	bfbc      	itt	lt
 80003a2:	40d0      	lsrlt	r0, r2
 80003a4:	4318      	orrlt	r0, r3
 80003a6:	4770      	bx	lr
 80003a8:	f092 0f00 	teq	r2, #0
 80003ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003b0:	bf06      	itte	eq
 80003b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003b6:	3201      	addeq	r2, #1
 80003b8:	3b01      	subne	r3, #1
 80003ba:	e7b5      	b.n	8000328 <__addsf3+0x58>
 80003bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c4:	bf18      	it	ne
 80003c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ca:	d021      	beq.n	8000410 <__addsf3+0x140>
 80003cc:	ea92 0f03 	teq	r2, r3
 80003d0:	d004      	beq.n	80003dc <__addsf3+0x10c>
 80003d2:	f092 0f00 	teq	r2, #0
 80003d6:	bf08      	it	eq
 80003d8:	4608      	moveq	r0, r1
 80003da:	4770      	bx	lr
 80003dc:	ea90 0f01 	teq	r0, r1
 80003e0:	bf1c      	itt	ne
 80003e2:	2000      	movne	r0, #0
 80003e4:	4770      	bxne	lr
 80003e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003ea:	d104      	bne.n	80003f6 <__addsf3+0x126>
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	bf28      	it	cs
 80003f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003f4:	4770      	bx	lr
 80003f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003fa:	bf3c      	itt	cc
 80003fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000400:	4770      	bxcc	lr
 8000402:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000406:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800040a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800040e:	4770      	bx	lr
 8000410:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000414:	bf16      	itet	ne
 8000416:	4608      	movne	r0, r1
 8000418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800041c:	4601      	movne	r1, r0
 800041e:	0242      	lsls	r2, r0, #9
 8000420:	bf06      	itte	eq
 8000422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000426:	ea90 0f01 	teqeq	r0, r1
 800042a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800042e:	4770      	bx	lr

08000430 <__aeabi_ui2f>:
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e004      	b.n	8000440 <__aeabi_i2f+0x8>
 8000436:	bf00      	nop

08000438 <__aeabi_i2f>:
 8000438:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	ea5f 0c00 	movs.w	ip, r0
 8000444:	bf08      	it	eq
 8000446:	4770      	bxeq	lr
 8000448:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800044c:	4601      	mov	r1, r0
 800044e:	f04f 0000 	mov.w	r0, #0
 8000452:	e01c      	b.n	800048e <__aeabi_l2f+0x2a>

08000454 <__aeabi_ul2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e00a      	b.n	8000478 <__aeabi_l2f+0x14>
 8000462:	bf00      	nop

08000464 <__aeabi_l2f>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000470:	d502      	bpl.n	8000478 <__aeabi_l2f+0x14>
 8000472:	4240      	negs	r0, r0
 8000474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000478:	ea5f 0c01 	movs.w	ip, r1
 800047c:	bf02      	ittt	eq
 800047e:	4684      	moveq	ip, r0
 8000480:	4601      	moveq	r1, r0
 8000482:	2000      	moveq	r0, #0
 8000484:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000488:	bf08      	it	eq
 800048a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800048e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000492:	fabc f28c 	clz	r2, ip
 8000496:	3a08      	subs	r2, #8
 8000498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800049c:	db10      	blt.n	80004c0 <__aeabi_l2f+0x5c>
 800049e:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a2:	4463      	add	r3, ip
 80004a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a8:	f1c2 0220 	rsb	r2, r2, #32
 80004ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	eb43 0002 	adc.w	r0, r3, r2
 80004b8:	bf08      	it	eq
 80004ba:	f020 0001 	biceq.w	r0, r0, #1
 80004be:	4770      	bx	lr
 80004c0:	f102 0220 	add.w	r2, r2, #32
 80004c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d0:	fa21 f202 	lsr.w	r2, r1, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004de:	4770      	bx	lr

080004e0 <__gesf2>:
 80004e0:	f04f 3cff 	mov.w	ip, #4294967295
 80004e4:	e006      	b.n	80004f4 <__cmpsf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__lesf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	e002      	b.n	80004f4 <__cmpsf2+0x4>
 80004ee:	bf00      	nop

080004f0 <__cmpsf2>:
 80004f0:	f04f 0c01 	mov.w	ip, #1
 80004f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000500:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000504:	bf18      	it	ne
 8000506:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800050a:	d011      	beq.n	8000530 <__cmpsf2+0x40>
 800050c:	b001      	add	sp, #4
 800050e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000512:	bf18      	it	ne
 8000514:	ea90 0f01 	teqne	r0, r1
 8000518:	bf58      	it	pl
 800051a:	ebb2 0003 	subspl.w	r0, r2, r3
 800051e:	bf88      	it	hi
 8000520:	17c8      	asrhi	r0, r1, #31
 8000522:	bf38      	it	cc
 8000524:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000528:	bf18      	it	ne
 800052a:	f040 0001 	orrne.w	r0, r0, #1
 800052e:	4770      	bx	lr
 8000530:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000534:	d102      	bne.n	800053c <__cmpsf2+0x4c>
 8000536:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800053a:	d105      	bne.n	8000548 <__cmpsf2+0x58>
 800053c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000540:	d1e4      	bne.n	800050c <__cmpsf2+0x1c>
 8000542:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000546:	d0e1      	beq.n	800050c <__cmpsf2+0x1c>
 8000548:	f85d 0b04 	ldr.w	r0, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <__aeabi_cfrcmple>:
 8000550:	4684      	mov	ip, r0
 8000552:	4608      	mov	r0, r1
 8000554:	4661      	mov	r1, ip
 8000556:	e7ff      	b.n	8000558 <__aeabi_cfcmpeq>

08000558 <__aeabi_cfcmpeq>:
 8000558:	b50f      	push	{r0, r1, r2, r3, lr}
 800055a:	f7ff ffc9 	bl	80004f0 <__cmpsf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	bf48      	it	mi
 8000562:	f110 0f00 	cmnmi.w	r0, #0
 8000566:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000568 <__aeabi_fcmpeq>:
 8000568:	f84d ed08 	str.w	lr, [sp, #-8]!
 800056c:	f7ff fff4 	bl	8000558 <__aeabi_cfcmpeq>
 8000570:	bf0c      	ite	eq
 8000572:	2001      	moveq	r0, #1
 8000574:	2000      	movne	r0, #0
 8000576:	f85d fb08 	ldr.w	pc, [sp], #8
 800057a:	bf00      	nop

0800057c <__aeabi_fcmplt>:
 800057c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000580:	f7ff ffea 	bl	8000558 <__aeabi_cfcmpeq>
 8000584:	bf34      	ite	cc
 8000586:	2001      	movcc	r0, #1
 8000588:	2000      	movcs	r0, #0
 800058a:	f85d fb08 	ldr.w	pc, [sp], #8
 800058e:	bf00      	nop

08000590 <__aeabi_fcmple>:
 8000590:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000594:	f7ff ffe0 	bl	8000558 <__aeabi_cfcmpeq>
 8000598:	bf94      	ite	ls
 800059a:	2001      	movls	r0, #1
 800059c:	2000      	movhi	r0, #0
 800059e:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a2:	bf00      	nop

080005a4 <__aeabi_fcmpge>:
 80005a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a8:	f7ff ffd2 	bl	8000550 <__aeabi_cfrcmple>
 80005ac:	bf94      	ite	ls
 80005ae:	2001      	movls	r0, #1
 80005b0:	2000      	movhi	r0, #0
 80005b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005b6:	bf00      	nop

080005b8 <__aeabi_fcmpgt>:
 80005b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005bc:	f7ff ffc8 	bl	8000550 <__aeabi_cfrcmple>
 80005c0:	bf34      	ite	cc
 80005c2:	2001      	movcc	r0, #1
 80005c4:	2000      	movcs	r0, #0
 80005c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ca:	bf00      	nop

080005cc <__aeabi_f2iz>:
 80005cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80005d4:	d30f      	bcc.n	80005f6 <__aeabi_f2iz+0x2a>
 80005d6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80005da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005de:	d90d      	bls.n	80005fc <__aeabi_f2iz+0x30>
 80005e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005e8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005ec:	fa23 f002 	lsr.w	r0, r3, r2
 80005f0:	bf18      	it	ne
 80005f2:	4240      	negne	r0, r0
 80005f4:	4770      	bx	lr
 80005f6:	f04f 0000 	mov.w	r0, #0
 80005fa:	4770      	bx	lr
 80005fc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000600:	d101      	bne.n	8000606 <__aeabi_f2iz+0x3a>
 8000602:	0242      	lsls	r2, r0, #9
 8000604:	d105      	bne.n	8000612 <__aeabi_f2iz+0x46>
 8000606:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800060a:	bf08      	it	eq
 800060c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000610:	4770      	bx	lr
 8000612:	f04f 0000 	mov.w	r0, #0
 8000616:	4770      	bx	lr

08000618 <floatToStr>:

SPI_HandleTypeDef hspi1;
UART_HandleTypeDef huart1;

void floatToStr(float val, char data[])
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
    if (val < 0) {
 8000622:	f04f 0100 	mov.w	r1, #0
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f7ff ffa8 	bl	800057c <__aeabi_fcmplt>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d009      	beq.n	8000646 <floatToStr+0x2e>
        *data = '-';
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	222d      	movs	r2, #45	@ 0x2d
 8000636:	701a      	strb	r2, [r3, #0]
        data++;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	3301      	adds	r3, #1
 800063c:	603b      	str	r3, [r7, #0]
        val *= -1;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8000644:	607b      	str	r3, [r7, #4]
    }
    int intVal = val * 100;
 8000646:	4947      	ldr	r1, [pc, #284]	@ (8000764 <floatToStr+0x14c>)
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff fd87 	bl	800015c <__aeabi_fmul>
 800064e:	4603      	mov	r3, r0
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ffbb 	bl	80005cc <__aeabi_f2iz>
 8000656:	4603      	mov	r3, r0
 8000658:	60fb      	str	r3, [r7, #12]
    data[5] = (intVal % 10) + '0';
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	4b42      	ldr	r3, [pc, #264]	@ (8000768 <floatToStr+0x150>)
 800065e:	fb83 1302 	smull	r1, r3, r3, r2
 8000662:	1099      	asrs	r1, r3, #2
 8000664:	17d3      	asrs	r3, r2, #31
 8000666:	1ac9      	subs	r1, r1, r3
 8000668:	460b      	mov	r3, r1
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	440b      	add	r3, r1
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	1ad1      	subs	r1, r2, r3
 8000672:	b2ca      	uxtb	r2, r1
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	3305      	adds	r3, #5
 8000678:	3230      	adds	r2, #48	@ 0x30
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	701a      	strb	r2, [r3, #0]
    intVal /= 10;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4a39      	ldr	r2, [pc, #228]	@ (8000768 <floatToStr+0x150>)
 8000682:	fb82 1203 	smull	r1, r2, r2, r3
 8000686:	1092      	asrs	r2, r2, #2
 8000688:	17db      	asrs	r3, r3, #31
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	60fb      	str	r3, [r7, #12]
    data[4] = (intVal % 10) + '0';
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	4b35      	ldr	r3, [pc, #212]	@ (8000768 <floatToStr+0x150>)
 8000692:	fb83 1302 	smull	r1, r3, r3, r2
 8000696:	1099      	asrs	r1, r3, #2
 8000698:	17d3      	asrs	r3, r2, #31
 800069a:	1ac9      	subs	r1, r1, r3
 800069c:	460b      	mov	r3, r1
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	440b      	add	r3, r1
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	1ad1      	subs	r1, r2, r3
 80006a6:	b2ca      	uxtb	r2, r1
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	3304      	adds	r3, #4
 80006ac:	3230      	adds	r2, #48	@ 0x30
 80006ae:	b2d2      	uxtb	r2, r2
 80006b0:	701a      	strb	r2, [r3, #0]
    data[3] = '.';
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	3303      	adds	r3, #3
 80006b6:	222e      	movs	r2, #46	@ 0x2e
 80006b8:	701a      	strb	r2, [r3, #0]
    intVal /= 10;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000768 <floatToStr+0x150>)
 80006be:	fb82 1203 	smull	r1, r2, r2, r3
 80006c2:	1092      	asrs	r2, r2, #2
 80006c4:	17db      	asrs	r3, r3, #31
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	60fb      	str	r3, [r7, #12]
    data[2] = (intVal % 10) + '0';
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <floatToStr+0x150>)
 80006ce:	fb83 1302 	smull	r1, r3, r3, r2
 80006d2:	1099      	asrs	r1, r3, #2
 80006d4:	17d3      	asrs	r3, r2, #31
 80006d6:	1ac9      	subs	r1, r1, r3
 80006d8:	460b      	mov	r3, r1
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	440b      	add	r3, r1
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	1ad1      	subs	r1, r2, r3
 80006e2:	b2ca      	uxtb	r2, r1
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	3302      	adds	r3, #2
 80006e8:	3230      	adds	r2, #48	@ 0x30
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	701a      	strb	r2, [r3, #0]
    intVal /= 10;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000768 <floatToStr+0x150>)
 80006f2:	fb82 1203 	smull	r1, r2, r2, r3
 80006f6:	1092      	asrs	r2, r2, #2
 80006f8:	17db      	asrs	r3, r3, #31
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	60fb      	str	r3, [r7, #12]
    data[1] = (intVal % 10) + '0';
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <floatToStr+0x150>)
 8000702:	fb83 1302 	smull	r1, r3, r3, r2
 8000706:	1099      	asrs	r1, r3, #2
 8000708:	17d3      	asrs	r3, r2, #31
 800070a:	1ac9      	subs	r1, r1, r3
 800070c:	460b      	mov	r3, r1
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	440b      	add	r3, r1
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	1ad1      	subs	r1, r2, r3
 8000716:	b2ca      	uxtb	r2, r1
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	3230      	adds	r2, #48	@ 0x30
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	701a      	strb	r2, [r3, #0]
    intVal /= 10;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4a10      	ldr	r2, [pc, #64]	@ (8000768 <floatToStr+0x150>)
 8000726:	fb82 1203 	smull	r1, r2, r2, r3
 800072a:	1092      	asrs	r2, r2, #2
 800072c:	17db      	asrs	r3, r3, #31
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	60fb      	str	r3, [r7, #12]
    data[0] = (intVal % 10) + '0';
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <floatToStr+0x150>)
 8000736:	fb83 1302 	smull	r1, r3, r3, r2
 800073a:	1099      	asrs	r1, r3, #2
 800073c:	17d3      	asrs	r3, r2, #31
 800073e:	1ac9      	subs	r1, r1, r3
 8000740:	460b      	mov	r3, r1
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	440b      	add	r3, r1
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	1ad1      	subs	r1, r2, r3
 800074a:	b2cb      	uxtb	r3, r1
 800074c:	3330      	adds	r3, #48	@ 0x30
 800074e:	b2da      	uxtb	r2, r3
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	701a      	strb	r2, [r3, #0]
    data[6] = '\0'; // Null-terminate the string
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	3306      	adds	r3, #6
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	42c80000 	.word	0x42c80000
 8000768:	66666667 	.word	0x66666667

0800076c <main>:
void MX_USART1_UART_Init(void);

uint8_t readRegister(uint8_t reg);

int main(void)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b09f      	sub	sp, #124	@ 0x7c
 8000770:	af02      	add	r7, sp, #8
    tc72_t tc72;
    uint8_t TxBuf[10];
    uint8_t RxBuf[10];

    char str[20];
    char str2[20] = "temperature = ";
 8000772:	4b84      	ldr	r3, [pc, #528]	@ (8000984 <main+0x218>)
 8000774:	f107 0420 	add.w	r4, r7, #32
 8000778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800077a:	c407      	stmia	r4!, {r0, r1, r2}
 800077c:	8023      	strh	r3, [r4, #0]
 800077e:	3402      	adds	r4, #2
 8000780:	0c1b      	lsrs	r3, r3, #16
 8000782:	7023      	strb	r3, [r4, #0]
 8000784:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	711a      	strb	r2, [r3, #4]
    float temp;
    int x;

    HAL_Init();
 800078e:	f000 fb61 	bl	8000e54 <HAL_Init>
    SystemClock_Config();
 8000792:	f000 f907 	bl	80009a4 <SystemClock_Config>
    MX_GPIO_Init();
 8000796:	f000 f9a1 	bl	8000adc <MX_GPIO_Init>
    MX_SPI1_Init();
 800079a:	f000 f93f 	bl	8000a1c <MX_SPI1_Init>
    MX_USART1_UART_Init();
 800079e:	f000 f973 	bl	8000a88 <MX_USART1_UART_Init>

    while (1)
    {
        // Set TC72 to continuous read mode
        TxBuf[0] = 0x80;
 80007a2:	2380      	movs	r3, #128	@ 0x80
 80007a4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        TxBuf[1] = 0x01|0x80;
 80007a8:	2381      	movs	r3, #129	@ 0x81
 80007aa:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

        ASSERT_CS();
 80007ae:	2201      	movs	r2, #1
 80007b0:	2110      	movs	r1, #16
 80007b2:	4875      	ldr	r0, [pc, #468]	@ (8000988 <main+0x21c>)
 80007b4:	f000 fe34 	bl	8001420 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, TxBuf, 4, 100);
 80007b8:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80007bc:	2364      	movs	r3, #100	@ 0x64
 80007be:	2204      	movs	r2, #4
 80007c0:	4872      	ldr	r0, [pc, #456]	@ (800098c <main+0x220>)
 80007c2:	f001 fad9 	bl	8001d78 <HAL_SPI_Transmit>
        DEASSERT_CS();
 80007c6:	2200      	movs	r2, #0
 80007c8:	2110      	movs	r1, #16
 80007ca:	486f      	ldr	r0, [pc, #444]	@ (8000988 <main+0x21c>)
 80007cc:	f000 fe28 	bl	8001420 <HAL_GPIO_WritePin>

        // Read and print control register
        uint8_t controlReg = readRegister(0x03);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f9bb 	bl	8000b4c <readRegister>
 80007d6:	4603      	mov	r3, r0
 80007d8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        char debugStr[30];
        sprintf(debugStr, "Control Register: 0x%02X\n\r", controlReg);
 80007dc:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80007e0:	463b      	mov	r3, r7
 80007e2:	496b      	ldr	r1, [pc, #428]	@ (8000990 <main+0x224>)
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 f831 	bl	800284c <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)debugStr, strlen(debugStr), 100);
 80007ea:	463b      	mov	r3, r7
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fcad 	bl	800014c <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4639      	mov	r1, r7
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	4866      	ldr	r0, [pc, #408]	@ (8000994 <main+0x228>)
 80007fc:	f001 fea6 	bl	800254c <HAL_UART_Transmit>

        // Read LSB bits (0x01 register)
        TxBuf[0] = 0x01;
 8000800:	2301      	movs	r3, #1
 8000802:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        temp = 0.0f;
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	66fb      	str	r3, [r7, #108]	@ 0x6c

        ASSERT_CS();
 800080c:	2201      	movs	r2, #1
 800080e:	2110      	movs	r1, #16
 8000810:	485d      	ldr	r0, [pc, #372]	@ (8000988 <main+0x21c>)
 8000812:	f000 fe05 	bl	8001420 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, TxBuf, RxBuf, 4, 100);
 8000816:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800081a:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800081e:	2364      	movs	r3, #100	@ 0x64
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2304      	movs	r3, #4
 8000824:	4859      	ldr	r0, [pc, #356]	@ (800098c <main+0x220>)
 8000826:	f001 fbea 	bl	8001ffe <HAL_SPI_TransmitReceive>
        DEASSERT_CS();
 800082a:	2200      	movs	r2, #0
 800082c:	2110      	movs	r1, #16
 800082e:	4856      	ldr	r0, [pc, #344]	@ (8000988 <main+0x21c>)
 8000830:	f000 fdf6 	bl	8001420 <HAL_GPIO_WritePin>

        // Print LSB register
        sprintf(debugStr, "LSB Register: 0x%02X\n\r", RxBuf[1]);
 8000834:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000838:	461a      	mov	r2, r3
 800083a:	463b      	mov	r3, r7
 800083c:	4956      	ldr	r1, [pc, #344]	@ (8000998 <main+0x22c>)
 800083e:	4618      	mov	r0, r3
 8000840:	f002 f804 	bl	800284c <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)debugStr, strlen(debugStr), 100);
 8000844:	463b      	mov	r3, r7
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fc80 	bl	800014c <strlen>
 800084c:	4603      	mov	r3, r0
 800084e:	b29a      	uxth	r2, r3
 8000850:	4639      	mov	r1, r7
 8000852:	2364      	movs	r3, #100	@ 0x64
 8000854:	484f      	ldr	r0, [pc, #316]	@ (8000994 <main+0x228>)
 8000856:	f001 fe79 	bl	800254c <HAL_UART_Transmit>

        if (RxBuf[1] & (1 << 6)) {
 800085a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800085e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000862:	2b00      	cmp	r3, #0
 8000864:	d007      	beq.n	8000876 <main+0x10a>
            temp += 0.5f;
 8000866:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800086a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800086c:	f7ff fd30 	bl	80002d0 <__addsf3>
 8000870:	4603      	mov	r3, r0
 8000872:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000874:	e00b      	b.n	800088e <main+0x122>
        } else if (RxBuf[1] & (1 << 7)) {
 8000876:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800087a:	b25b      	sxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	da06      	bge.n	800088e <main+0x122>
            temp += 0.25f;
 8000880:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8000884:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000886:	f7ff fd23 	bl	80002d0 <__addsf3>
 800088a:	4603      	mov	r3, r0
 800088c:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // Read MSB bits (0x02 register)
        TxBuf[0] = 0x02;
 800088e:	2302      	movs	r3, #2
 8000890:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        ASSERT_CS();
 8000894:	2201      	movs	r2, #1
 8000896:	2110      	movs	r1, #16
 8000898:	483b      	ldr	r0, [pc, #236]	@ (8000988 <main+0x21c>)
 800089a:	f000 fdc1 	bl	8001420 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, TxBuf, RxBuf, 3, 100);
 800089e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80008a2:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80008a6:	2364      	movs	r3, #100	@ 0x64
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2303      	movs	r3, #3
 80008ac:	4837      	ldr	r0, [pc, #220]	@ (800098c <main+0x220>)
 80008ae:	f001 fba6 	bl	8001ffe <HAL_SPI_TransmitReceive>
        DEASSERT_CS();
 80008b2:	2200      	movs	r2, #0
 80008b4:	2110      	movs	r1, #16
 80008b6:	4834      	ldr	r0, [pc, #208]	@ (8000988 <main+0x21c>)
 80008b8:	f000 fdb2 	bl	8001420 <HAL_GPIO_WritePin>

        // Print MSB register
        sprintf(debugStr, "MSB Register: 0x%02X\n\r", RxBuf[1]);
 80008bc:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80008c0:	461a      	mov	r2, r3
 80008c2:	463b      	mov	r3, r7
 80008c4:	4935      	ldr	r1, [pc, #212]	@ (800099c <main+0x230>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 ffc0 	bl	800284c <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)debugStr, strlen(debugStr), 100);
 80008cc:	463b      	mov	r3, r7
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fc3c 	bl	800014c <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4639      	mov	r1, r7
 80008da:	2364      	movs	r3, #100	@ 0x64
 80008dc:	482d      	ldr	r0, [pc, #180]	@ (8000994 <main+0x228>)
 80008de:	f001 fe35 	bl	800254c <HAL_UART_Transmit>

        tc72.msb_temp = RxBuf[1];
 80008e2:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80008e6:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
        tc72.lsb_temp = RxBuf[2];
 80008ea:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80008ee:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60

        int16_t Temp_reg = (tc72.msb_temp << 8) | tc72.lsb_temp;
 80008f2:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
        Temp_reg >>= 7;
 8000906:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 800090a:	11db      	asrs	r3, r3, #7
 800090c:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
        x = ((signed char)(Temp_reg));
 8000910:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8000914:	b25b      	sxtb	r3, r3
 8000916:	667b      	str	r3, [r7, #100]	@ 0x64
        temp += x;
 8000918:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800091a:	f7ff fd8d 	bl	8000438 <__aeabi_i2f>
 800091e:	4603      	mov	r3, r0
 8000920:	4619      	mov	r1, r3
 8000922:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000924:	f7ff fcd4 	bl	80002d0 <__addsf3>
 8000928:	4603      	mov	r3, r0
 800092a:	66fb      	str	r3, [r7, #108]	@ 0x6c

        floatToStr(temp, str);
 800092c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000930:	4619      	mov	r1, r3
 8000932:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000934:	f7ff fe70 	bl	8000618 <floatToStr>

        HAL_UART_Transmit(&huart1, (uint8_t*)str2, strlen(str2), 100);
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc05 	bl	800014c <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f107 0120 	add.w	r1, r7, #32
 800094a:	2364      	movs	r3, #100	@ 0x64
 800094c:	4811      	ldr	r0, [pc, #68]	@ (8000994 <main+0x228>)
 800094e:	f001 fdfd 	bl	800254c <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8000952:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fbf8 	bl	800014c <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	b29a      	uxth	r2, r3
 8000960:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000964:	2364      	movs	r3, #100	@ 0x64
 8000966:	480b      	ldr	r0, [pc, #44]	@ (8000994 <main+0x228>)
 8000968:	f001 fdf0 	bl	800254c <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r", 2, 100);
 800096c:	2364      	movs	r3, #100	@ 0x64
 800096e:	2202      	movs	r2, #2
 8000970:	490b      	ldr	r1, [pc, #44]	@ (80009a0 <main+0x234>)
 8000972:	4808      	ldr	r0, [pc, #32]	@ (8000994 <main+0x228>)
 8000974:	f001 fdea 	bl	800254c <HAL_UART_Transmit>
        HAL_Delay(1000);
 8000978:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800097c:	f000 facc 	bl	8000f18 <HAL_Delay>
    {
 8000980:	e70f      	b.n	80007a2 <main+0x36>
 8000982:	bf00      	nop
 8000984:	08003214 	.word	0x08003214
 8000988:	40010800 	.word	0x40010800
 800098c:	20000078 	.word	0x20000078
 8000990:	080031c4 	.word	0x080031c4
 8000994:	200000d0 	.word	0x200000d0
 8000998:	080031e0 	.word	0x080031e0
 800099c:	080031f8 	.word	0x080031f8
 80009a0:	08003210 	.word	0x08003210

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b090      	sub	sp, #64	@ 0x40
 80009a8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	2228      	movs	r2, #40	@ 0x28
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 ff6a 	bl	800288c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ca:	2301      	movs	r3, #1
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ce:	2310      	movs	r3, #16
 80009d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fd38 	bl	8001450 <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x46>
    {
        Error_Handler();
 80009e6:	f000 f8ab 	bl	8000b40 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	607b      	str	r3, [r7, #4]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009fa:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 ffa5 	bl	8001954 <HAL_RCC_ClockConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x70>
    {
        Error_Handler();
 8000a10:	f000 f896 	bl	8000b40 <Error_Handler>
    }
}
 8000a14:	bf00      	nop
 8000a16:	3740      	adds	r7, #64	@ 0x40
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8000a20:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a22:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <MX_SPI1_Init+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a26:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a2c:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a4c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a68:	220a      	movs	r2, #10
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <MX_SPI1_Init+0x64>)
 8000a6e:	f001 f8ff 	bl	8001c70 <HAL_SPI_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 8000a78:	f000 f862 	bl	8000b40 <Error_Handler>
    }
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000078 	.word	0x20000078
 8000a84:	40013000 	.word	0x40013000

08000a88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ad8 <MX_USART1_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a94:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a98:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	f001 fcf4 	bl	80024ac <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 8000aca:	f000 f839 	bl	8000b40 <Error_Handler>
    }
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000d0 	.word	0x200000d0
 8000ad8:	40013800 	.word	0x40013800

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_GPIO_Init+0x5c>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a10      	ldr	r2, [pc, #64]	@ (8000b38 <MX_GPIO_Init+0x5c>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <MX_GPIO_Init+0x5c>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <MX_GPIO_Init+0x60>)
 8000b0e:	f000 fc87 	bl	8001420 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : CS_Pin */
    GPIO_InitStruct.Pin = CS_Pin;
 8000b12:	2310      	movs	r3, #16
 8000b14:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	4619      	mov	r1, r3
 8000b28:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_GPIO_Init+0x60>)
 8000b2a:	f000 fafd 	bl	8001128 <HAL_GPIO_Init>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010800 	.word	0x40010800

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <readRegister>:
    {
    }
}

uint8_t readRegister(uint8_t reg)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
    uint8_t TxBuf[1] = {reg};
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	733b      	strb	r3, [r7, #12]
    uint8_t RxBuf[1];

    ASSERT_CS();
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	4810      	ldr	r0, [pc, #64]	@ (8000ba0 <readRegister+0x54>)
 8000b60:	f000 fc5e 	bl	8001420 <HAL_GPIO_WritePin>
    if (HAL_SPI_TransmitReceive(&hspi1, TxBuf, RxBuf, 1, 100) != HAL_OK) {
 8000b64:	f107 0208 	add.w	r2, r7, #8
 8000b68:	f107 010c 	add.w	r1, r7, #12
 8000b6c:	2364      	movs	r3, #100	@ 0x64
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2301      	movs	r3, #1
 8000b72:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <readRegister+0x58>)
 8000b74:	f001 fa43 	bl	8001ffe <HAL_SPI_TransmitReceive>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d006      	beq.n	8000b8c <readRegister+0x40>
        DEASSERT_CS();
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2110      	movs	r1, #16
 8000b82:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <readRegister+0x54>)
 8000b84:	f000 fc4c 	bl	8001420 <HAL_GPIO_WritePin>
        return 0xFF; // Error value
 8000b88:	23ff      	movs	r3, #255	@ 0xff
 8000b8a:	e005      	b.n	8000b98 <readRegister+0x4c>
    }
    DEASSERT_CS();
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2110      	movs	r1, #16
 8000b90:	4803      	ldr	r0, [pc, #12]	@ (8000ba0 <readRegister+0x54>)
 8000b92:	f000 fc45 	bl	8001420 <HAL_GPIO_WritePin>

    return RxBuf[0];
 8000b96:	7a3b      	ldrb	r3, [r7, #8]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40010800 	.word	0x40010800
 8000ba4:	20000078 	.word	0x20000078

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bae:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <HAL_MspInit+0x5c>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a14      	ldr	r2, [pc, #80]	@ (8000c04 <HAL_MspInit+0x5c>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
 8000bba:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_MspInit+0x5c>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <HAL_MspInit+0x5c>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4a0e      	ldr	r2, [pc, #56]	@ (8000c04 <HAL_MspInit+0x5c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd0:	61d3      	str	r3, [r2, #28]
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <HAL_MspInit+0x5c>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000bde:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <HAL_MspInit+0x60>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <HAL_MspInit+0x60>)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40010000 	.word	0x40010000

08000c0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1b      	ldr	r2, [pc, #108]	@ (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d12f      	bne.n	8000c8c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <HAL_SPI_MspInit+0x8c>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a19      	ldr	r2, [pc, #100]	@ (8000c98 <HAL_SPI_MspInit+0x8c>)
 8000c32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <HAL_SPI_MspInit+0x8c>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <HAL_SPI_MspInit+0x8c>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a13      	ldr	r2, [pc, #76]	@ (8000c98 <HAL_SPI_MspInit+0x8c>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <HAL_SPI_MspInit+0x8c>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c5c:	23a0      	movs	r3, #160	@ 0xa0
 8000c5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480b      	ldr	r0, [pc, #44]	@ (8000c9c <HAL_SPI_MspInit+0x90>)
 8000c70:	f000 fa5a 	bl	8001128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c74:	2340      	movs	r3, #64	@ 0x40
 8000c76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	4619      	mov	r1, r3
 8000c86:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <HAL_SPI_MspInit+0x90>)
 8000c88:	f000 fa4e 	bl	8001128 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c8c:	bf00      	nop
 8000c8e:	3720      	adds	r7, #32
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40013000 	.word	0x40013000
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010800 	.word	0x40010800

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1c      	ldr	r2, [pc, #112]	@ (8000d2c <HAL_UART_MspInit+0x8c>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d131      	bne.n	8000d24 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <HAL_UART_MspInit+0x90>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d30 <HAL_UART_MspInit+0x90>)
 8000cc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <HAL_UART_MspInit+0x90>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <HAL_UART_MspInit+0x90>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <HAL_UART_MspInit+0x90>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_UART_MspInit+0x90>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4619      	mov	r1, r3
 8000d04:	480b      	ldr	r0, [pc, #44]	@ (8000d34 <HAL_UART_MspInit+0x94>)
 8000d06:	f000 fa0f 	bl	8001128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <HAL_UART_MspInit+0x94>)
 8000d20:	f000 fa02 	bl	8001128 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40013800 	.word	0x40013800
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010800 	.word	0x40010800

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <NMI_Handler+0x4>

08000d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <MemManage_Handler+0x4>

08000d50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d88:	f000 f8aa 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	@ (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	@ (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f001 fd6c 	bl	800289c <__errno>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a05      	ldr	r2, [pc, #20]	@ (8000df4 <_sbrk+0x64>)
 8000de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20002800 	.word	0x20002800
 8000df0:	00000400 	.word	0x00000400
 8000df4:	20000118 	.word	0x20000118
 8000df8:	20000268 	.word	0x20000268

08000dfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e08:	f7ff fff8 	bl	8000dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e0c:	480b      	ldr	r0, [pc, #44]	@ (8000e3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e0e:	490c      	ldr	r1, [pc, #48]	@ (8000e40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e10:	4a0c      	ldr	r2, [pc, #48]	@ (8000e44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a09      	ldr	r2, [pc, #36]	@ (8000e48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e24:	4c09      	ldr	r4, [pc, #36]	@ (8000e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e32:	f001 fd39 	bl	80028a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e36:	f7ff fc99 	bl	800076c <main>
  bx lr
 8000e3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e44:	08003298 	.word	0x08003298
  ldr r2, =_sbss
 8000e48:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e4c:	20000268 	.word	0x20000268

08000e50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC1_2_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <HAL_Init+0x28>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	@ (8000e7c <HAL_Init+0x28>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f92b 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	200f      	movs	r0, #15
 8000e6c:	f000 f808 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff fe9a 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40022000 	.word	0x40022000

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f935 	bl	800110e <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 f90b 	bl	80010d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	@ (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <HAL_IncTick+0x1c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <HAL_IncTick+0x20>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a03      	ldr	r2, [pc, #12]	@ (8000f00 <HAL_IncTick+0x20>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	20000008 	.word	0x20000008
 8000f00:	2000011c 	.word	0x2000011c

08000f04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b02      	ldr	r3, [pc, #8]	@ (8000f14 <HAL_GetTick+0x10>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	2000011c 	.word	0x2000011c

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff fff0 	bl	8000f04 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffe0 	bl	8000f04 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	@ (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	@ (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	@ 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff90 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff49 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff5e 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff90 	bl	8001018 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5f 	bl	8000fc4 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffb0 	bl	800107c <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b08b      	sub	sp, #44	@ 0x2c
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113a:	e161      	b.n	8001400 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800113c:	2201      	movs	r2, #1
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 8150 	bne.w	80013fa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	4a97      	ldr	r2, [pc, #604]	@ (80013bc <HAL_GPIO_Init+0x294>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d05e      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001164:	4a95      	ldr	r2, [pc, #596]	@ (80013bc <HAL_GPIO_Init+0x294>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d875      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 800116a:	4a95      	ldr	r2, [pc, #596]	@ (80013c0 <HAL_GPIO_Init+0x298>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d058      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001170:	4a93      	ldr	r2, [pc, #588]	@ (80013c0 <HAL_GPIO_Init+0x298>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d86f      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 8001176:	4a93      	ldr	r2, [pc, #588]	@ (80013c4 <HAL_GPIO_Init+0x29c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d052      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 800117c:	4a91      	ldr	r2, [pc, #580]	@ (80013c4 <HAL_GPIO_Init+0x29c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d869      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 8001182:	4a91      	ldr	r2, [pc, #580]	@ (80013c8 <HAL_GPIO_Init+0x2a0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d04c      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001188:	4a8f      	ldr	r2, [pc, #572]	@ (80013c8 <HAL_GPIO_Init+0x2a0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d863      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 800118e:	4a8f      	ldr	r2, [pc, #572]	@ (80013cc <HAL_GPIO_Init+0x2a4>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d046      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001194:	4a8d      	ldr	r2, [pc, #564]	@ (80013cc <HAL_GPIO_Init+0x2a4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d85d      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 800119a:	2b12      	cmp	r3, #18
 800119c:	d82a      	bhi.n	80011f4 <HAL_GPIO_Init+0xcc>
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d859      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 80011a2:	a201      	add	r2, pc, #4	@ (adr r2, 80011a8 <HAL_GPIO_Init+0x80>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	08001223 	.word	0x08001223
 80011ac:	080011fd 	.word	0x080011fd
 80011b0:	0800120f 	.word	0x0800120f
 80011b4:	08001251 	.word	0x08001251
 80011b8:	08001257 	.word	0x08001257
 80011bc:	08001257 	.word	0x08001257
 80011c0:	08001257 	.word	0x08001257
 80011c4:	08001257 	.word	0x08001257
 80011c8:	08001257 	.word	0x08001257
 80011cc:	08001257 	.word	0x08001257
 80011d0:	08001257 	.word	0x08001257
 80011d4:	08001257 	.word	0x08001257
 80011d8:	08001257 	.word	0x08001257
 80011dc:	08001257 	.word	0x08001257
 80011e0:	08001257 	.word	0x08001257
 80011e4:	08001257 	.word	0x08001257
 80011e8:	08001257 	.word	0x08001257
 80011ec:	08001205 	.word	0x08001205
 80011f0:	08001219 	.word	0x08001219
 80011f4:	4a76      	ldr	r2, [pc, #472]	@ (80013d0 <HAL_GPIO_Init+0x2a8>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011fa:	e02c      	b.n	8001256 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	623b      	str	r3, [r7, #32]
          break;
 8001202:	e029      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	3304      	adds	r3, #4
 800120a:	623b      	str	r3, [r7, #32]
          break;
 800120c:	e024      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	3308      	adds	r3, #8
 8001214:	623b      	str	r3, [r7, #32]
          break;
 8001216:	e01f      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	330c      	adds	r3, #12
 800121e:	623b      	str	r3, [r7, #32]
          break;
 8001220:	e01a      	b.n	8001258 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800122a:	2304      	movs	r3, #4
 800122c:	623b      	str	r3, [r7, #32]
          break;
 800122e:	e013      	b.n	8001258 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d105      	bne.n	8001244 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001238:	2308      	movs	r3, #8
 800123a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	611a      	str	r2, [r3, #16]
          break;
 8001242:	e009      	b.n	8001258 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001244:	2308      	movs	r3, #8
 8001246:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	615a      	str	r2, [r3, #20]
          break;
 800124e:	e003      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
          break;
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x130>
          break;
 8001256:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	2bff      	cmp	r3, #255	@ 0xff
 800125c:	d801      	bhi.n	8001262 <HAL_GPIO_Init+0x13a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	e001      	b.n	8001266 <HAL_GPIO_Init+0x13e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3304      	adds	r3, #4
 8001266:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2bff      	cmp	r3, #255	@ 0xff
 800126c:	d802      	bhi.n	8001274 <HAL_GPIO_Init+0x14c>
 800126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	e002      	b.n	800127a <HAL_GPIO_Init+0x152>
 8001274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001276:	3b08      	subs	r3, #8
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	210f      	movs	r1, #15
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	401a      	ands	r2, r3
 800128c:	6a39      	ldr	r1, [r7, #32]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	431a      	orrs	r2, r3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 80a9 	beq.w	80013fa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012a8:	4b4a      	ldr	r3, [pc, #296]	@ (80013d4 <HAL_GPIO_Init+0x2ac>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a49      	ldr	r2, [pc, #292]	@ (80013d4 <HAL_GPIO_Init+0x2ac>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b47      	ldr	r3, [pc, #284]	@ (80013d4 <HAL_GPIO_Init+0x2ac>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012c0:	4a45      	ldr	r2, [pc, #276]	@ (80013d8 <HAL_GPIO_Init+0x2b0>)
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	220f      	movs	r2, #15
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a3d      	ldr	r2, [pc, #244]	@ (80013dc <HAL_GPIO_Init+0x2b4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d00d      	beq.n	8001308 <HAL_GPIO_Init+0x1e0>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a3c      	ldr	r2, [pc, #240]	@ (80013e0 <HAL_GPIO_Init+0x2b8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d007      	beq.n	8001304 <HAL_GPIO_Init+0x1dc>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a3b      	ldr	r2, [pc, #236]	@ (80013e4 <HAL_GPIO_Init+0x2bc>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d101      	bne.n	8001300 <HAL_GPIO_Init+0x1d8>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e004      	b.n	800130a <HAL_GPIO_Init+0x1e2>
 8001300:	2303      	movs	r3, #3
 8001302:	e002      	b.n	800130a <HAL_GPIO_Init+0x1e2>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_GPIO_Init+0x1e2>
 8001308:	2300      	movs	r3, #0
 800130a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800130c:	f002 0203 	and.w	r2, r2, #3
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	4093      	lsls	r3, r2
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800131a:	492f      	ldr	r1, [pc, #188]	@ (80013d8 <HAL_GPIO_Init+0x2b0>)
 800131c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001334:	4b2c      	ldr	r3, [pc, #176]	@ (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	492b      	ldr	r1, [pc, #172]	@ (80013e8 <HAL_GPIO_Init+0x2c0>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	608b      	str	r3, [r1, #8]
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001342:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	43db      	mvns	r3, r3
 800134a:	4927      	ldr	r1, [pc, #156]	@ (80013e8 <HAL_GPIO_Init+0x2c0>)
 800134c:	4013      	ands	r3, r2
 800134e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800135c:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <HAL_GPIO_Init+0x2c0>)
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	4921      	ldr	r1, [pc, #132]	@ (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	60cb      	str	r3, [r1, #12]
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800136a:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <HAL_GPIO_Init+0x2c0>)
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	43db      	mvns	r3, r3
 8001372:	491d      	ldr	r1, [pc, #116]	@ (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001374:	4013      	ands	r3, r2
 8001376:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d006      	beq.n	8001392 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001384:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	4917      	ldr	r1, [pc, #92]	@ (80013e8 <HAL_GPIO_Init+0x2c0>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	43db      	mvns	r3, r3
 800139a:	4913      	ldr	r1, [pc, #76]	@ (80013e8 <HAL_GPIO_Init+0x2c0>)
 800139c:	4013      	ands	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d01f      	beq.n	80013ec <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013ac:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <HAL_GPIO_Init+0x2c0>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	490d      	ldr	r1, [pc, #52]	@ (80013e8 <HAL_GPIO_Init+0x2c0>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e01f      	b.n	80013fa <HAL_GPIO_Init+0x2d2>
 80013ba:	bf00      	nop
 80013bc:	10320000 	.word	0x10320000
 80013c0:	10310000 	.word	0x10310000
 80013c4:	10220000 	.word	0x10220000
 80013c8:	10210000 	.word	0x10210000
 80013cc:	10120000 	.word	0x10120000
 80013d0:	10110000 	.word	0x10110000
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010000 	.word	0x40010000
 80013dc:	40010800 	.word	0x40010800
 80013e0:	40010c00 	.word	0x40010c00
 80013e4:	40011000 	.word	0x40011000
 80013e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ec:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <HAL_GPIO_Init+0x2f4>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	4909      	ldr	r1, [pc, #36]	@ (800141c <HAL_GPIO_Init+0x2f4>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fc:	3301      	adds	r3, #1
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001406:	fa22 f303 	lsr.w	r3, r2, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	f47f ae96 	bne.w	800113c <HAL_GPIO_Init+0x14>
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	372c      	adds	r7, #44	@ 0x2c
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	40010400 	.word	0x40010400

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800143c:	e003      	b.n	8001446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	041a      	lsls	r2, r3, #16
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	611a      	str	r2, [r3, #16]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e272      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 8087 	beq.w	800157e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001470:	4b92      	ldr	r3, [pc, #584]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	2b04      	cmp	r3, #4
 800147a:	d00c      	beq.n	8001496 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800147c:	4b8f      	ldr	r3, [pc, #572]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 030c 	and.w	r3, r3, #12
 8001484:	2b08      	cmp	r3, #8
 8001486:	d112      	bne.n	80014ae <HAL_RCC_OscConfig+0x5e>
 8001488:	4b8c      	ldr	r3, [pc, #560]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001494:	d10b      	bne.n	80014ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001496:	4b89      	ldr	r3, [pc, #548]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d06c      	beq.n	800157c <HAL_RCC_OscConfig+0x12c>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d168      	bne.n	800157c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e24c      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x76>
 80014b8:	4b80      	ldr	r3, [pc, #512]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a7f      	ldr	r2, [pc, #508]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	e02e      	b.n	8001524 <HAL_RCC_OscConfig+0xd4>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x98>
 80014ce:	4b7b      	ldr	r3, [pc, #492]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a7a      	ldr	r2, [pc, #488]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b78      	ldr	r3, [pc, #480]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a77      	ldr	r2, [pc, #476]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e01d      	b.n	8001524 <HAL_RCC_OscConfig+0xd4>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0xbc>
 80014f2:	4b72      	ldr	r3, [pc, #456]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a71      	ldr	r2, [pc, #452]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b6f      	ldr	r3, [pc, #444]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6e      	ldr	r2, [pc, #440]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0xd4>
 800150c:	4b6b      	ldr	r3, [pc, #428]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a6a      	ldr	r2, [pc, #424]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b68      	ldr	r3, [pc, #416]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a67      	ldr	r2, [pc, #412]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001522:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d013      	beq.n	8001554 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fcea 	bl	8000f04 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fce6 	bl	8000f04 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	@ 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e200      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b5d      	ldr	r3, [pc, #372]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0xe4>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fcd6 	bl	8000f04 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fcd2 	bl	8000f04 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	@ 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e1ec      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	4b53      	ldr	r3, [pc, #332]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x10c>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d063      	beq.n	8001652 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800158a:	4b4c      	ldr	r3, [pc, #304]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001596:	4b49      	ldr	r3, [pc, #292]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d11c      	bne.n	80015dc <HAL_RCC_OscConfig+0x18c>
 80015a2:	4b46      	ldr	r3, [pc, #280]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d116      	bne.n	80015dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	4b43      	ldr	r3, [pc, #268]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_RCC_OscConfig+0x176>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e1c0      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b3d      	ldr	r3, [pc, #244]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4939      	ldr	r1, [pc, #228]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	e03a      	b.n	8001652 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e4:	4b36      	ldr	r3, [pc, #216]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fc8b 	bl	8000f04 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fc87 	bl	8000f04 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e1a1      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b2a      	ldr	r3, [pc, #168]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4927      	ldr	r1, [pc, #156]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
 8001624:	e015      	b.n	8001652 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001626:	4b26      	ldr	r3, [pc, #152]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fc6a 	bl	8000f04 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001634:	f7ff fc66 	bl	8000f04 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e180      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d03a      	beq.n	80016d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d019      	beq.n	800169a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <HAL_RCC_OscConfig+0x274>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166c:	f7ff fc4a 	bl	8000f04 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff fc46 	bl	8000f04 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e160      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	4b0d      	ldr	r3, [pc, #52]	@ (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001692:	2001      	movs	r0, #1
 8001694:	f000 face 	bl	8001c34 <RCC_Delay>
 8001698:	e01c      	b.n	80016d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169a:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_RCC_OscConfig+0x274>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a0:	f7ff fc30 	bl	8000f04 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a6:	e00f      	b.n	80016c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a8:	f7ff fc2c 	bl	8000f04 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d908      	bls.n	80016c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e146      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000
 80016c0:	42420000 	.word	0x42420000
 80016c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c8:	4b92      	ldr	r3, [pc, #584]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1e9      	bne.n	80016a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80a6 	beq.w	800182e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10d      	bne.n	800170e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b88      	ldr	r3, [pc, #544]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a87      	ldr	r2, [pc, #540]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b85      	ldr	r3, [pc, #532]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170a:	2301      	movs	r3, #1
 800170c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170e:	4b82      	ldr	r3, [pc, #520]	@ (8001918 <HAL_RCC_OscConfig+0x4c8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d118      	bne.n	800174c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171a:	4b7f      	ldr	r3, [pc, #508]	@ (8001918 <HAL_RCC_OscConfig+0x4c8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a7e      	ldr	r2, [pc, #504]	@ (8001918 <HAL_RCC_OscConfig+0x4c8>)
 8001720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001726:	f7ff fbed 	bl	8000f04 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172e:	f7ff fbe9 	bl	8000f04 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b64      	cmp	r3, #100	@ 0x64
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e103      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001740:	4b75      	ldr	r3, [pc, #468]	@ (8001918 <HAL_RCC_OscConfig+0x4c8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x312>
 8001754:	4b6f      	ldr	r3, [pc, #444]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	4a6e      	ldr	r2, [pc, #440]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6213      	str	r3, [r2, #32]
 8001760:	e02d      	b.n	80017be <HAL_RCC_OscConfig+0x36e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x334>
 800176a:	4b6a      	ldr	r3, [pc, #424]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4a69      	ldr	r2, [pc, #420]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6213      	str	r3, [r2, #32]
 8001776:	4b67      	ldr	r3, [pc, #412]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4a66      	ldr	r2, [pc, #408]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	6213      	str	r3, [r2, #32]
 8001782:	e01c      	b.n	80017be <HAL_RCC_OscConfig+0x36e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b05      	cmp	r3, #5
 800178a:	d10c      	bne.n	80017a6 <HAL_RCC_OscConfig+0x356>
 800178c:	4b61      	ldr	r3, [pc, #388]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a60      	ldr	r2, [pc, #384]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6213      	str	r3, [r2, #32]
 8001798:	4b5e      	ldr	r3, [pc, #376]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4a5d      	ldr	r2, [pc, #372]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6213      	str	r3, [r2, #32]
 80017a4:	e00b      	b.n	80017be <HAL_RCC_OscConfig+0x36e>
 80017a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6213      	str	r3, [r2, #32]
 80017b2:	4b58      	ldr	r3, [pc, #352]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4a57      	ldr	r2, [pc, #348]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	f023 0304 	bic.w	r3, r3, #4
 80017bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d015      	beq.n	80017f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fb9d 	bl	8000f04 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff fb99 	bl	8000f04 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e0b1      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0ee      	beq.n	80017ce <HAL_RCC_OscConfig+0x37e>
 80017f0:	e014      	b.n	800181c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7ff fb87 	bl	8000f04 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7ff fb83 	bl	8000f04 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e09b      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001810:	4b40      	ldr	r3, [pc, #256]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ee      	bne.n	80017fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d105      	bne.n	800182e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001822:	4b3c      	ldr	r3, [pc, #240]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	4a3b      	ldr	r2, [pc, #236]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800182c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8087 	beq.w	8001946 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001838:	4b36      	ldr	r3, [pc, #216]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b08      	cmp	r3, #8
 8001842:	d061      	beq.n	8001908 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d146      	bne.n	80018da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184c:	4b33      	ldr	r3, [pc, #204]	@ (800191c <HAL_RCC_OscConfig+0x4cc>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff fb57 	bl	8000f04 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185a:	f7ff fb53 	bl	8000f04 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e06d      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186c:	4b29      	ldr	r3, [pc, #164]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001880:	d108      	bne.n	8001894 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001882:	4b24      	ldr	r3, [pc, #144]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	4921      	ldr	r1, [pc, #132]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001894:	4b1f      	ldr	r3, [pc, #124]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a19      	ldr	r1, [r3, #32]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a4:	430b      	orrs	r3, r1
 80018a6:	491b      	ldr	r1, [pc, #108]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ac:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <HAL_RCC_OscConfig+0x4cc>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff fb27 	bl	8000f04 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff fb23 	bl	8000f04 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e03d      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x46a>
 80018d8:	e035      	b.n	8001946 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <HAL_RCC_OscConfig+0x4cc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fb10 	bl	8000f04 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fb0c 	bl	8000f04 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e026      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x498>
 8001906:	e01e      	b.n	8001946 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d107      	bne.n	8001920 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e019      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
 8001914:	40021000 	.word	0x40021000
 8001918:	40007000 	.word	0x40007000
 800191c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <HAL_RCC_OscConfig+0x500>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	429a      	cmp	r2, r3
 8001932:	d106      	bne.n	8001942 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	429a      	cmp	r2, r3
 8001940:	d001      	beq.n	8001946 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000

08001954 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0d0      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001968:	4b6a      	ldr	r3, [pc, #424]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d910      	bls.n	8001998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b67      	ldr	r3, [pc, #412]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 0207 	bic.w	r2, r3, #7
 800197e:	4965      	ldr	r1, [pc, #404]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b63      	ldr	r3, [pc, #396]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0b8      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b0:	4b59      	ldr	r3, [pc, #356]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a58      	ldr	r2, [pc, #352]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c8:	4b53      	ldr	r3, [pc, #332]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4a52      	ldr	r2, [pc, #328]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d4:	4b50      	ldr	r3, [pc, #320]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	494d      	ldr	r1, [pc, #308]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d040      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	4b47      	ldr	r3, [pc, #284]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d115      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e07f      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a12:	4b41      	ldr	r3, [pc, #260]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e073      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a22:	4b3d      	ldr	r3, [pc, #244]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e06b      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a32:	4b39      	ldr	r3, [pc, #228]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f023 0203 	bic.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4936      	ldr	r1, [pc, #216]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a44:	f7ff fa5e 	bl	8000f04 <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7ff fa5a 	bl	8000f04 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e053      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	4b2d      	ldr	r3, [pc, #180]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 020c 	and.w	r2, r3, #12
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d1eb      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a74:	4b27      	ldr	r3, [pc, #156]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d210      	bcs.n	8001aa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b24      	ldr	r3, [pc, #144]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 0207 	bic.w	r2, r3, #7
 8001a8a:	4922      	ldr	r1, [pc, #136]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b20      	ldr	r3, [pc, #128]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e032      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab0:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4916      	ldr	r1, [pc, #88]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d009      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ace:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	490e      	ldr	r1, [pc, #56]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ae2:	f000 f821 	bl	8001b28 <HAL_RCC_GetSysClockFreq>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	490a      	ldr	r1, [pc, #40]	@ (8001b1c <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	5ccb      	ldrb	r3, [r1, r3]
 8001af6:	fa22 f303 	lsr.w	r3, r2, r3
 8001afa:	4a09      	ldr	r2, [pc, #36]	@ (8001b20 <HAL_RCC_ClockConfig+0x1cc>)
 8001afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001afe:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <HAL_RCC_ClockConfig+0x1d0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f9bc 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40022000 	.word	0x40022000
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	08003228 	.word	0x08003228
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000004 	.word	0x20000004

08001b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b42:	4b1e      	ldr	r3, [pc, #120]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d002      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x30>
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0x36>
 8001b56:	e027      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b58:	4b19      	ldr	r3, [pc, #100]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b5a:	613b      	str	r3, [r7, #16]
      break;
 8001b5c:	e027      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	0c9b      	lsrs	r3, r3, #18
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	4a17      	ldr	r2, [pc, #92]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b68:	5cd3      	ldrb	r3, [r2, r3]
 8001b6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d010      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	0c5b      	lsrs	r3, r3, #17
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	4a11      	ldr	r2, [pc, #68]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b8a:	fb03 f202 	mul.w	r2, r3, r2
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e004      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ba0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	613b      	str	r3, [r7, #16]
      break;
 8001ba6:	e002      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ba8:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001baa:	613b      	str	r3, [r7, #16]
      break;
 8001bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bae:	693b      	ldr	r3, [r7, #16]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	007a1200 	.word	0x007a1200
 8001bc4:	08003240 	.word	0x08003240
 8001bc8:	08003250 	.word	0x08003250
 8001bcc:	003d0900 	.word	0x003d0900

08001bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	@ (8001be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	20000000 	.word	0x20000000

08001be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001be8:	f7ff fff2 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4903      	ldr	r1, [pc, #12]	@ (8001c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08003238 	.word	0x08003238

08001c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c10:	f7ff ffde 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	0adb      	lsrs	r3, r3, #11
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4903      	ldr	r1, [pc, #12]	@ (8001c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	08003238 	.word	0x08003238

08001c34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <RCC_Delay+0x34>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <RCC_Delay+0x38>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	0a5b      	lsrs	r3, r3, #9
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c50:	bf00      	nop
  }
  while (Delay --);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1e5a      	subs	r2, r3, #1
 8001c56:	60fa      	str	r2, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f9      	bne.n	8001c50 <RCC_Delay+0x1c>
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	10624dd3 	.word	0x10624dd3

08001c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e076      	b.n	8001d70 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d108      	bne.n	8001c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c92:	d009      	beq.n	8001ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
 8001c9a:	e005      	b.n	8001ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d106      	bne.n	8001cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7fe ffa2 	bl	8000c0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2c:	ea42 0103 	orr.w	r1, r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	0c1a      	lsrs	r2, r3, #16
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f002 0204 	and.w	r2, r2, #4
 8001d4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	69da      	ldr	r2, [r3, #28]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	4613      	mov	r3, r2
 8001d86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_SPI_Transmit+0x22>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e12d      	b.n	8001ff6 <HAL_SPI_Transmit+0x27e>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001da2:	f7ff f8af 	bl	8000f04 <HAL_GetTick>
 8001da6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d002      	beq.n	8001dbe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001db8:	2302      	movs	r3, #2
 8001dba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001dbc:	e116      	b.n	8001fec <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <HAL_SPI_Transmit+0x52>
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001dce:	e10d      	b.n	8001fec <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	88fa      	ldrh	r2, [r7, #6]
 8001de8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	88fa      	ldrh	r2, [r7, #6]
 8001dee:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e16:	d10f      	bne.n	8001e38 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e42:	2b40      	cmp	r3, #64	@ 0x40
 8001e44:	d007      	beq.n	8001e56 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e5e:	d14f      	bne.n	8001f00 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <HAL_SPI_Transmit+0xf6>
 8001e68:	8afb      	ldrh	r3, [r7, #22]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d142      	bne.n	8001ef4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	881a      	ldrh	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	1c9a      	adds	r2, r3, #2
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e92:	e02f      	b.n	8001ef4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d112      	bne.n	8001ec8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	881a      	ldrh	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	1c9a      	adds	r2, r3, #2
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001ec6:	e015      	b.n	8001ef4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ec8:	f7ff f81c 	bl	8000f04 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d803      	bhi.n	8001ee0 <HAL_SPI_Transmit+0x168>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ede:	d102      	bne.n	8001ee6 <HAL_SPI_Transmit+0x16e>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001ef2:	e07b      	b.n	8001fec <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ca      	bne.n	8001e94 <HAL_SPI_Transmit+0x11c>
 8001efe:	e050      	b.n	8001fa2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <HAL_SPI_Transmit+0x196>
 8001f08:	8afb      	ldrh	r3, [r7, #22]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d144      	bne.n	8001f98 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	330c      	adds	r3, #12
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f34:	e030      	b.n	8001f98 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d113      	bne.n	8001f6c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	330c      	adds	r3, #12
 8001f4e:	7812      	ldrb	r2, [r2, #0]
 8001f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f6a:	e015      	b.n	8001f98 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f6c:	f7fe ffca 	bl	8000f04 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d803      	bhi.n	8001f84 <HAL_SPI_Transmit+0x20c>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f82:	d102      	bne.n	8001f8a <HAL_SPI_Transmit+0x212>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001f96:	e029      	b.n	8001fec <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1c9      	bne.n	8001f36 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	6839      	ldr	r1, [r7, #0]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 fa62 	bl	8002470 <SPI_EndRxTxTransaction>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10a      	bne.n	8001fd6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	77fb      	strb	r3, [r7, #31]
 8001fe2:	e003      	b.n	8001fec <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001ff4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b08c      	sub	sp, #48	@ 0x30
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800200c:	2301      	movs	r3, #1
 800200e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_SPI_TransmitReceive+0x26>
 8002020:	2302      	movs	r3, #2
 8002022:	e198      	b.n	8002356 <HAL_SPI_TransmitReceive+0x358>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800202c:	f7fe ff6a 	bl	8000f04 <HAL_GetTick>
 8002030:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002038:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002046:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800204a:	2b01      	cmp	r3, #1
 800204c:	d00f      	beq.n	800206e <HAL_SPI_TransmitReceive+0x70>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002054:	d107      	bne.n	8002066 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d103      	bne.n	8002066 <HAL_SPI_TransmitReceive+0x68>
 800205e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002062:	2b04      	cmp	r3, #4
 8002064:	d003      	beq.n	800206e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002066:	2302      	movs	r3, #2
 8002068:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800206c:	e16d      	b.n	800234a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_SPI_TransmitReceive+0x82>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_SPI_TransmitReceive+0x82>
 800207a:	887b      	ldrh	r3, [r7, #2]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d103      	bne.n	8002088 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002086:	e160      	b.n	800234a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b04      	cmp	r3, #4
 8002092:	d003      	beq.n	800209c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2205      	movs	r2, #5
 8002098:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	887a      	ldrh	r2, [r7, #2]
 80020b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	887a      	ldrh	r2, [r7, #2]
 80020be:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020dc:	2b40      	cmp	r3, #64	@ 0x40
 80020de:	d007      	beq.n	80020f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020f8:	d17c      	bne.n	80021f4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <HAL_SPI_TransmitReceive+0x10a>
 8002102:	8b7b      	ldrh	r3, [r7, #26]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d16a      	bne.n	80021de <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	881a      	ldrh	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	1c9a      	adds	r2, r3, #2
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800212c:	e057      	b.n	80021de <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b02      	cmp	r3, #2
 800213a:	d11b      	bne.n	8002174 <HAL_SPI_TransmitReceive+0x176>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d016      	beq.n	8002174 <HAL_SPI_TransmitReceive+0x176>
 8002146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002148:	2b01      	cmp	r3, #1
 800214a:	d113      	bne.n	8002174 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002150:	881a      	ldrh	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	1c9a      	adds	r2, r3, #2
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002166:	b29b      	uxth	r3, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d119      	bne.n	80021b6 <HAL_SPI_TransmitReceive+0x1b8>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d014      	beq.n	80021b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002196:	b292      	uxth	r2, r2
 8002198:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219e:	1c9a      	adds	r2, r3, #2
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021b2:	2301      	movs	r3, #1
 80021b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021b6:	f7fe fea5 	bl	8000f04 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d80b      	bhi.n	80021de <HAL_SPI_TransmitReceive+0x1e0>
 80021c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d007      	beq.n	80021de <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80021dc:	e0b5      	b.n	800234a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1a2      	bne.n	800212e <HAL_SPI_TransmitReceive+0x130>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d19d      	bne.n	800212e <HAL_SPI_TransmitReceive+0x130>
 80021f2:	e080      	b.n	80022f6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <HAL_SPI_TransmitReceive+0x204>
 80021fc:	8b7b      	ldrh	r3, [r7, #26]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d16f      	bne.n	80022e2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	330c      	adds	r3, #12
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002228:	e05b      	b.n	80022e2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b02      	cmp	r3, #2
 8002236:	d11c      	bne.n	8002272 <HAL_SPI_TransmitReceive+0x274>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d017      	beq.n	8002272 <HAL_SPI_TransmitReceive+0x274>
 8002242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002244:	2b01      	cmp	r3, #1
 8002246:	d114      	bne.n	8002272 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	330c      	adds	r3, #12
 8002252:	7812      	ldrb	r2, [r2, #0]
 8002254:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002264:	b29b      	uxth	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d119      	bne.n	80022b4 <HAL_SPI_TransmitReceive+0x2b6>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d014      	beq.n	80022b4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022b0:	2301      	movs	r3, #1
 80022b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022b4:	f7fe fe26 	bl	8000f04 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d803      	bhi.n	80022cc <HAL_SPI_TransmitReceive+0x2ce>
 80022c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ca:	d102      	bne.n	80022d2 <HAL_SPI_TransmitReceive+0x2d4>
 80022cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d107      	bne.n	80022e2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80022e0:	e033      	b.n	800234a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d19e      	bne.n	800222a <HAL_SPI_TransmitReceive+0x22c>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d199      	bne.n	800222a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f8b8 	bl	8002470 <SPI_EndRxTxTransaction>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d006      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2220      	movs	r2, #32
 8002310:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002312:	e01a      	b.n	800234a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10a      	bne.n	8002332 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002340:	e003      	b.n	800234a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002352:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002356:	4618      	mov	r0, r3
 8002358:	3730      	adds	r7, #48	@ 0x30
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002370:	f7fe fdc8 	bl	8000f04 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	4413      	add	r3, r2
 800237e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002380:	f7fe fdc0 	bl	8000f04 <HAL_GetTick>
 8002384:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002386:	4b39      	ldr	r3, [pc, #228]	@ (800246c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	015b      	lsls	r3, r3, #5
 800238c:	0d1b      	lsrs	r3, r3, #20
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002396:	e054      	b.n	8002442 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239e:	d050      	beq.n	8002442 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023a0:	f7fe fdb0 	bl	8000f04 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d902      	bls.n	80023b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d13d      	bne.n	8002432 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80023c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023ce:	d111      	bne.n	80023f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023d8:	d004      	beq.n	80023e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023e2:	d107      	bne.n	80023f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023fc:	d10f      	bne.n	800241e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800241c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e017      	b.n	8002462 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3b01      	subs	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4013      	ands	r3, r2
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	429a      	cmp	r2, r3
 8002450:	bf0c      	ite	eq
 8002452:	2301      	moveq	r3, #1
 8002454:	2300      	movne	r3, #0
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	429a      	cmp	r2, r3
 800245e:	d19b      	bne.n	8002398 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000000 	.word	0x20000000

08002470 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af02      	add	r7, sp, #8
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2200      	movs	r2, #0
 8002484:	2180      	movs	r1, #128	@ 0x80
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f7ff ff6a 	bl	8002360 <SPI_WaitFlagStateUntilTimeout>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002496:	f043 0220 	orr.w	r2, r3, #32
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e000      	b.n	80024a4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e042      	b.n	8002544 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fbe4 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2224      	movs	r2, #36	@ 0x24
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f91d 	bl	8002730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	@ 0x28
 8002550:	af02      	add	r7, sp, #8
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b20      	cmp	r3, #32
 800256a:	d16d      	bne.n	8002648 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <HAL_UART_Transmit+0x2c>
 8002572:	88fb      	ldrh	r3, [r7, #6]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e066      	b.n	800264a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2221      	movs	r2, #33	@ 0x21
 8002586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800258a:	f7fe fcbb 	bl	8000f04 <HAL_GetTick>
 800258e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	88fa      	ldrh	r2, [r7, #6]
 8002594:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	88fa      	ldrh	r2, [r7, #6]
 800259a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025a4:	d108      	bne.n	80025b8 <HAL_UART_Transmit+0x6c>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d104      	bne.n	80025b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	e003      	b.n	80025c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025c0:	e02a      	b.n	8002618 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2200      	movs	r2, #0
 80025ca:	2180      	movs	r1, #128	@ 0x80
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f840 	bl	8002652 <UART_WaitOnFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e036      	b.n	800264a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10b      	bne.n	80025fa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	3302      	adds	r3, #2
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	e007      	b.n	800260a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	781a      	ldrb	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	3301      	adds	r3, #1
 8002608:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800260e:	b29b      	uxth	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1cf      	bne.n	80025c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2200      	movs	r2, #0
 800262a:	2140      	movs	r1, #64	@ 0x40
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f810 	bl	8002652 <UART_WaitOnFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e006      	b.n	800264a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	e000      	b.n	800264a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b090      	sub	sp, #64	@ 0x40
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002662:	e050      	b.n	8002706 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266a:	d04c      	beq.n	8002706 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800266c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <UART_WaitOnFlagUntilTimeout+0x30>
 8002672:	f7fe fc47 	bl	8000f04 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800267e:	429a      	cmp	r2, r3
 8002680:	d241      	bcs.n	8002706 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	330c      	adds	r3, #12
 8002688:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268c:	e853 3f00 	ldrex	r3, [r3]
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	330c      	adds	r3, #12
 80026a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026a2:	637a      	str	r2, [r7, #52]	@ 0x34
 80026a4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026aa:	e841 2300 	strex	r3, r2, [r1]
 80026ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80026b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1e5      	bne.n	8002682 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3314      	adds	r3, #20
 80026bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	e853 3f00 	ldrex	r3, [r3]
 80026c4:	613b      	str	r3, [r7, #16]
   return(result);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3314      	adds	r3, #20
 80026d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026d6:	623a      	str	r2, [r7, #32]
 80026d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026da:	69f9      	ldr	r1, [r7, #28]
 80026dc:	6a3a      	ldr	r2, [r7, #32]
 80026de:	e841 2300 	strex	r3, r2, [r1]
 80026e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1e5      	bne.n	80026b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e00f      	b.n	8002726 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4013      	ands	r3, r2
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	429a      	cmp	r2, r3
 8002714:	bf0c      	ite	eq
 8002716:	2301      	moveq	r3, #1
 8002718:	2300      	movne	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	429a      	cmp	r2, r3
 8002722:	d09f      	beq.n	8002664 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3740      	adds	r7, #64	@ 0x40
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800276a:	f023 030c 	bic.w	r3, r3, #12
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	430b      	orrs	r3, r1
 8002776:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2c      	ldr	r2, [pc, #176]	@ (8002844 <UART_SetConfig+0x114>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d103      	bne.n	80027a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002798:	f7ff fa38 	bl	8001c0c <HAL_RCC_GetPCLK2Freq>
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	e002      	b.n	80027a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027a0:	f7ff fa20 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 80027a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	009a      	lsls	r2, r3, #2
 80027b0:	441a      	add	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	4a22      	ldr	r2, [pc, #136]	@ (8002848 <UART_SetConfig+0x118>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	0119      	lsls	r1, r3, #4
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009a      	lsls	r2, r3, #2
 80027d0:	441a      	add	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002848 <UART_SetConfig+0x118>)
 80027de:	fba3 0302 	umull	r0, r3, r3, r2
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2064      	movs	r0, #100	@ 0x64
 80027e6:	fb00 f303 	mul.w	r3, r0, r3
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	3332      	adds	r3, #50	@ 0x32
 80027f0:	4a15      	ldr	r2, [pc, #84]	@ (8002848 <UART_SetConfig+0x118>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027fc:	4419      	add	r1, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009a      	lsls	r2, r3, #2
 8002808:	441a      	add	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fbb2 f2f3 	udiv	r2, r2, r3
 8002814:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <UART_SetConfig+0x118>)
 8002816:	fba3 0302 	umull	r0, r3, r3, r2
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2064      	movs	r0, #100	@ 0x64
 800281e:	fb00 f303 	mul.w	r3, r0, r3
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	3332      	adds	r3, #50	@ 0x32
 8002828:	4a07      	ldr	r2, [pc, #28]	@ (8002848 <UART_SetConfig+0x118>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	f003 020f 	and.w	r2, r3, #15
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	440a      	add	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40013800 	.word	0x40013800
 8002848:	51eb851f 	.word	0x51eb851f

0800284c <siprintf>:
 800284c:	b40e      	push	{r1, r2, r3}
 800284e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002852:	b500      	push	{lr}
 8002854:	b09c      	sub	sp, #112	@ 0x70
 8002856:	ab1d      	add	r3, sp, #116	@ 0x74
 8002858:	9002      	str	r0, [sp, #8]
 800285a:	9006      	str	r0, [sp, #24]
 800285c:	9107      	str	r1, [sp, #28]
 800285e:	9104      	str	r1, [sp, #16]
 8002860:	4808      	ldr	r0, [pc, #32]	@ (8002884 <siprintf+0x38>)
 8002862:	4909      	ldr	r1, [pc, #36]	@ (8002888 <siprintf+0x3c>)
 8002864:	f853 2b04 	ldr.w	r2, [r3], #4
 8002868:	9105      	str	r1, [sp, #20]
 800286a:	6800      	ldr	r0, [r0, #0]
 800286c:	a902      	add	r1, sp, #8
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	f000 f992 	bl	8002b98 <_svfiprintf_r>
 8002874:	2200      	movs	r2, #0
 8002876:	9b02      	ldr	r3, [sp, #8]
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	b01c      	add	sp, #112	@ 0x70
 800287c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002880:	b003      	add	sp, #12
 8002882:	4770      	bx	lr
 8002884:	2000000c 	.word	0x2000000c
 8002888:	ffff0208 	.word	0xffff0208

0800288c <memset>:
 800288c:	4603      	mov	r3, r0
 800288e:	4402      	add	r2, r0
 8002890:	4293      	cmp	r3, r2
 8002892:	d100      	bne.n	8002896 <memset+0xa>
 8002894:	4770      	bx	lr
 8002896:	f803 1b01 	strb.w	r1, [r3], #1
 800289a:	e7f9      	b.n	8002890 <memset+0x4>

0800289c <__errno>:
 800289c:	4b01      	ldr	r3, [pc, #4]	@ (80028a4 <__errno+0x8>)
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	2000000c 	.word	0x2000000c

080028a8 <__libc_init_array>:
 80028a8:	b570      	push	{r4, r5, r6, lr}
 80028aa:	2600      	movs	r6, #0
 80028ac:	4d0c      	ldr	r5, [pc, #48]	@ (80028e0 <__libc_init_array+0x38>)
 80028ae:	4c0d      	ldr	r4, [pc, #52]	@ (80028e4 <__libc_init_array+0x3c>)
 80028b0:	1b64      	subs	r4, r4, r5
 80028b2:	10a4      	asrs	r4, r4, #2
 80028b4:	42a6      	cmp	r6, r4
 80028b6:	d109      	bne.n	80028cc <__libc_init_array+0x24>
 80028b8:	f000 fc78 	bl	80031ac <_init>
 80028bc:	2600      	movs	r6, #0
 80028be:	4d0a      	ldr	r5, [pc, #40]	@ (80028e8 <__libc_init_array+0x40>)
 80028c0:	4c0a      	ldr	r4, [pc, #40]	@ (80028ec <__libc_init_array+0x44>)
 80028c2:	1b64      	subs	r4, r4, r5
 80028c4:	10a4      	asrs	r4, r4, #2
 80028c6:	42a6      	cmp	r6, r4
 80028c8:	d105      	bne.n	80028d6 <__libc_init_array+0x2e>
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
 80028cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d0:	4798      	blx	r3
 80028d2:	3601      	adds	r6, #1
 80028d4:	e7ee      	b.n	80028b4 <__libc_init_array+0xc>
 80028d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028da:	4798      	blx	r3
 80028dc:	3601      	adds	r6, #1
 80028de:	e7f2      	b.n	80028c6 <__libc_init_array+0x1e>
 80028e0:	08003290 	.word	0x08003290
 80028e4:	08003290 	.word	0x08003290
 80028e8:	08003290 	.word	0x08003290
 80028ec:	08003294 	.word	0x08003294

080028f0 <__retarget_lock_acquire_recursive>:
 80028f0:	4770      	bx	lr

080028f2 <__retarget_lock_release_recursive>:
 80028f2:	4770      	bx	lr

080028f4 <_free_r>:
 80028f4:	b538      	push	{r3, r4, r5, lr}
 80028f6:	4605      	mov	r5, r0
 80028f8:	2900      	cmp	r1, #0
 80028fa:	d040      	beq.n	800297e <_free_r+0x8a>
 80028fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002900:	1f0c      	subs	r4, r1, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	bfb8      	it	lt
 8002906:	18e4      	addlt	r4, r4, r3
 8002908:	f000 f8de 	bl	8002ac8 <__malloc_lock>
 800290c:	4a1c      	ldr	r2, [pc, #112]	@ (8002980 <_free_r+0x8c>)
 800290e:	6813      	ldr	r3, [r2, #0]
 8002910:	b933      	cbnz	r3, 8002920 <_free_r+0x2c>
 8002912:	6063      	str	r3, [r4, #4]
 8002914:	6014      	str	r4, [r2, #0]
 8002916:	4628      	mov	r0, r5
 8002918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800291c:	f000 b8da 	b.w	8002ad4 <__malloc_unlock>
 8002920:	42a3      	cmp	r3, r4
 8002922:	d908      	bls.n	8002936 <_free_r+0x42>
 8002924:	6820      	ldr	r0, [r4, #0]
 8002926:	1821      	adds	r1, r4, r0
 8002928:	428b      	cmp	r3, r1
 800292a:	bf01      	itttt	eq
 800292c:	6819      	ldreq	r1, [r3, #0]
 800292e:	685b      	ldreq	r3, [r3, #4]
 8002930:	1809      	addeq	r1, r1, r0
 8002932:	6021      	streq	r1, [r4, #0]
 8002934:	e7ed      	b.n	8002912 <_free_r+0x1e>
 8002936:	461a      	mov	r2, r3
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	b10b      	cbz	r3, 8002940 <_free_r+0x4c>
 800293c:	42a3      	cmp	r3, r4
 800293e:	d9fa      	bls.n	8002936 <_free_r+0x42>
 8002940:	6811      	ldr	r1, [r2, #0]
 8002942:	1850      	adds	r0, r2, r1
 8002944:	42a0      	cmp	r0, r4
 8002946:	d10b      	bne.n	8002960 <_free_r+0x6c>
 8002948:	6820      	ldr	r0, [r4, #0]
 800294a:	4401      	add	r1, r0
 800294c:	1850      	adds	r0, r2, r1
 800294e:	4283      	cmp	r3, r0
 8002950:	6011      	str	r1, [r2, #0]
 8002952:	d1e0      	bne.n	8002916 <_free_r+0x22>
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4408      	add	r0, r1
 800295a:	6010      	str	r0, [r2, #0]
 800295c:	6053      	str	r3, [r2, #4]
 800295e:	e7da      	b.n	8002916 <_free_r+0x22>
 8002960:	d902      	bls.n	8002968 <_free_r+0x74>
 8002962:	230c      	movs	r3, #12
 8002964:	602b      	str	r3, [r5, #0]
 8002966:	e7d6      	b.n	8002916 <_free_r+0x22>
 8002968:	6820      	ldr	r0, [r4, #0]
 800296a:	1821      	adds	r1, r4, r0
 800296c:	428b      	cmp	r3, r1
 800296e:	bf01      	itttt	eq
 8002970:	6819      	ldreq	r1, [r3, #0]
 8002972:	685b      	ldreq	r3, [r3, #4]
 8002974:	1809      	addeq	r1, r1, r0
 8002976:	6021      	streq	r1, [r4, #0]
 8002978:	6063      	str	r3, [r4, #4]
 800297a:	6054      	str	r4, [r2, #4]
 800297c:	e7cb      	b.n	8002916 <_free_r+0x22>
 800297e:	bd38      	pop	{r3, r4, r5, pc}
 8002980:	20000264 	.word	0x20000264

08002984 <sbrk_aligned>:
 8002984:	b570      	push	{r4, r5, r6, lr}
 8002986:	4e0f      	ldr	r6, [pc, #60]	@ (80029c4 <sbrk_aligned+0x40>)
 8002988:	460c      	mov	r4, r1
 800298a:	6831      	ldr	r1, [r6, #0]
 800298c:	4605      	mov	r5, r0
 800298e:	b911      	cbnz	r1, 8002996 <sbrk_aligned+0x12>
 8002990:	f000 fbaa 	bl	80030e8 <_sbrk_r>
 8002994:	6030      	str	r0, [r6, #0]
 8002996:	4621      	mov	r1, r4
 8002998:	4628      	mov	r0, r5
 800299a:	f000 fba5 	bl	80030e8 <_sbrk_r>
 800299e:	1c43      	adds	r3, r0, #1
 80029a0:	d103      	bne.n	80029aa <sbrk_aligned+0x26>
 80029a2:	f04f 34ff 	mov.w	r4, #4294967295
 80029a6:	4620      	mov	r0, r4
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
 80029aa:	1cc4      	adds	r4, r0, #3
 80029ac:	f024 0403 	bic.w	r4, r4, #3
 80029b0:	42a0      	cmp	r0, r4
 80029b2:	d0f8      	beq.n	80029a6 <sbrk_aligned+0x22>
 80029b4:	1a21      	subs	r1, r4, r0
 80029b6:	4628      	mov	r0, r5
 80029b8:	f000 fb96 	bl	80030e8 <_sbrk_r>
 80029bc:	3001      	adds	r0, #1
 80029be:	d1f2      	bne.n	80029a6 <sbrk_aligned+0x22>
 80029c0:	e7ef      	b.n	80029a2 <sbrk_aligned+0x1e>
 80029c2:	bf00      	nop
 80029c4:	20000260 	.word	0x20000260

080029c8 <_malloc_r>:
 80029c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029cc:	1ccd      	adds	r5, r1, #3
 80029ce:	f025 0503 	bic.w	r5, r5, #3
 80029d2:	3508      	adds	r5, #8
 80029d4:	2d0c      	cmp	r5, #12
 80029d6:	bf38      	it	cc
 80029d8:	250c      	movcc	r5, #12
 80029da:	2d00      	cmp	r5, #0
 80029dc:	4606      	mov	r6, r0
 80029de:	db01      	blt.n	80029e4 <_malloc_r+0x1c>
 80029e0:	42a9      	cmp	r1, r5
 80029e2:	d904      	bls.n	80029ee <_malloc_r+0x26>
 80029e4:	230c      	movs	r3, #12
 80029e6:	6033      	str	r3, [r6, #0]
 80029e8:	2000      	movs	r0, #0
 80029ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ac4 <_malloc_r+0xfc>
 80029f2:	f000 f869 	bl	8002ac8 <__malloc_lock>
 80029f6:	f8d8 3000 	ldr.w	r3, [r8]
 80029fa:	461c      	mov	r4, r3
 80029fc:	bb44      	cbnz	r4, 8002a50 <_malloc_r+0x88>
 80029fe:	4629      	mov	r1, r5
 8002a00:	4630      	mov	r0, r6
 8002a02:	f7ff ffbf 	bl	8002984 <sbrk_aligned>
 8002a06:	1c43      	adds	r3, r0, #1
 8002a08:	4604      	mov	r4, r0
 8002a0a:	d158      	bne.n	8002abe <_malloc_r+0xf6>
 8002a0c:	f8d8 4000 	ldr.w	r4, [r8]
 8002a10:	4627      	mov	r7, r4
 8002a12:	2f00      	cmp	r7, #0
 8002a14:	d143      	bne.n	8002a9e <_malloc_r+0xd6>
 8002a16:	2c00      	cmp	r4, #0
 8002a18:	d04b      	beq.n	8002ab2 <_malloc_r+0xea>
 8002a1a:	6823      	ldr	r3, [r4, #0]
 8002a1c:	4639      	mov	r1, r7
 8002a1e:	4630      	mov	r0, r6
 8002a20:	eb04 0903 	add.w	r9, r4, r3
 8002a24:	f000 fb60 	bl	80030e8 <_sbrk_r>
 8002a28:	4581      	cmp	r9, r0
 8002a2a:	d142      	bne.n	8002ab2 <_malloc_r+0xea>
 8002a2c:	6821      	ldr	r1, [r4, #0]
 8002a2e:	4630      	mov	r0, r6
 8002a30:	1a6d      	subs	r5, r5, r1
 8002a32:	4629      	mov	r1, r5
 8002a34:	f7ff ffa6 	bl	8002984 <sbrk_aligned>
 8002a38:	3001      	adds	r0, #1
 8002a3a:	d03a      	beq.n	8002ab2 <_malloc_r+0xea>
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	442b      	add	r3, r5
 8002a40:	6023      	str	r3, [r4, #0]
 8002a42:	f8d8 3000 	ldr.w	r3, [r8]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	bb62      	cbnz	r2, 8002aa4 <_malloc_r+0xdc>
 8002a4a:	f8c8 7000 	str.w	r7, [r8]
 8002a4e:	e00f      	b.n	8002a70 <_malloc_r+0xa8>
 8002a50:	6822      	ldr	r2, [r4, #0]
 8002a52:	1b52      	subs	r2, r2, r5
 8002a54:	d420      	bmi.n	8002a98 <_malloc_r+0xd0>
 8002a56:	2a0b      	cmp	r2, #11
 8002a58:	d917      	bls.n	8002a8a <_malloc_r+0xc2>
 8002a5a:	1961      	adds	r1, r4, r5
 8002a5c:	42a3      	cmp	r3, r4
 8002a5e:	6025      	str	r5, [r4, #0]
 8002a60:	bf18      	it	ne
 8002a62:	6059      	strne	r1, [r3, #4]
 8002a64:	6863      	ldr	r3, [r4, #4]
 8002a66:	bf08      	it	eq
 8002a68:	f8c8 1000 	streq.w	r1, [r8]
 8002a6c:	5162      	str	r2, [r4, r5]
 8002a6e:	604b      	str	r3, [r1, #4]
 8002a70:	4630      	mov	r0, r6
 8002a72:	f000 f82f 	bl	8002ad4 <__malloc_unlock>
 8002a76:	f104 000b 	add.w	r0, r4, #11
 8002a7a:	1d23      	adds	r3, r4, #4
 8002a7c:	f020 0007 	bic.w	r0, r0, #7
 8002a80:	1ac2      	subs	r2, r0, r3
 8002a82:	bf1c      	itt	ne
 8002a84:	1a1b      	subne	r3, r3, r0
 8002a86:	50a3      	strne	r3, [r4, r2]
 8002a88:	e7af      	b.n	80029ea <_malloc_r+0x22>
 8002a8a:	6862      	ldr	r2, [r4, #4]
 8002a8c:	42a3      	cmp	r3, r4
 8002a8e:	bf0c      	ite	eq
 8002a90:	f8c8 2000 	streq.w	r2, [r8]
 8002a94:	605a      	strne	r2, [r3, #4]
 8002a96:	e7eb      	b.n	8002a70 <_malloc_r+0xa8>
 8002a98:	4623      	mov	r3, r4
 8002a9a:	6864      	ldr	r4, [r4, #4]
 8002a9c:	e7ae      	b.n	80029fc <_malloc_r+0x34>
 8002a9e:	463c      	mov	r4, r7
 8002aa0:	687f      	ldr	r7, [r7, #4]
 8002aa2:	e7b6      	b.n	8002a12 <_malloc_r+0x4a>
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	42a3      	cmp	r3, r4
 8002aaa:	d1fb      	bne.n	8002aa4 <_malloc_r+0xdc>
 8002aac:	2300      	movs	r3, #0
 8002aae:	6053      	str	r3, [r2, #4]
 8002ab0:	e7de      	b.n	8002a70 <_malloc_r+0xa8>
 8002ab2:	230c      	movs	r3, #12
 8002ab4:	4630      	mov	r0, r6
 8002ab6:	6033      	str	r3, [r6, #0]
 8002ab8:	f000 f80c 	bl	8002ad4 <__malloc_unlock>
 8002abc:	e794      	b.n	80029e8 <_malloc_r+0x20>
 8002abe:	6005      	str	r5, [r0, #0]
 8002ac0:	e7d6      	b.n	8002a70 <_malloc_r+0xa8>
 8002ac2:	bf00      	nop
 8002ac4:	20000264 	.word	0x20000264

08002ac8 <__malloc_lock>:
 8002ac8:	4801      	ldr	r0, [pc, #4]	@ (8002ad0 <__malloc_lock+0x8>)
 8002aca:	f7ff bf11 	b.w	80028f0 <__retarget_lock_acquire_recursive>
 8002ace:	bf00      	nop
 8002ad0:	2000025c 	.word	0x2000025c

08002ad4 <__malloc_unlock>:
 8002ad4:	4801      	ldr	r0, [pc, #4]	@ (8002adc <__malloc_unlock+0x8>)
 8002ad6:	f7ff bf0c 	b.w	80028f2 <__retarget_lock_release_recursive>
 8002ada:	bf00      	nop
 8002adc:	2000025c 	.word	0x2000025c

08002ae0 <__ssputs_r>:
 8002ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae4:	461f      	mov	r7, r3
 8002ae6:	688e      	ldr	r6, [r1, #8]
 8002ae8:	4682      	mov	sl, r0
 8002aea:	42be      	cmp	r6, r7
 8002aec:	460c      	mov	r4, r1
 8002aee:	4690      	mov	r8, r2
 8002af0:	680b      	ldr	r3, [r1, #0]
 8002af2:	d82d      	bhi.n	8002b50 <__ssputs_r+0x70>
 8002af4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002af8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002afc:	d026      	beq.n	8002b4c <__ssputs_r+0x6c>
 8002afe:	6965      	ldr	r5, [r4, #20]
 8002b00:	6909      	ldr	r1, [r1, #16]
 8002b02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b06:	eba3 0901 	sub.w	r9, r3, r1
 8002b0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b0e:	1c7b      	adds	r3, r7, #1
 8002b10:	444b      	add	r3, r9
 8002b12:	106d      	asrs	r5, r5, #1
 8002b14:	429d      	cmp	r5, r3
 8002b16:	bf38      	it	cc
 8002b18:	461d      	movcc	r5, r3
 8002b1a:	0553      	lsls	r3, r2, #21
 8002b1c:	d527      	bpl.n	8002b6e <__ssputs_r+0x8e>
 8002b1e:	4629      	mov	r1, r5
 8002b20:	f7ff ff52 	bl	80029c8 <_malloc_r>
 8002b24:	4606      	mov	r6, r0
 8002b26:	b360      	cbz	r0, 8002b82 <__ssputs_r+0xa2>
 8002b28:	464a      	mov	r2, r9
 8002b2a:	6921      	ldr	r1, [r4, #16]
 8002b2c:	f000 fafa 	bl	8003124 <memcpy>
 8002b30:	89a3      	ldrh	r3, [r4, #12]
 8002b32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b3a:	81a3      	strh	r3, [r4, #12]
 8002b3c:	6126      	str	r6, [r4, #16]
 8002b3e:	444e      	add	r6, r9
 8002b40:	6026      	str	r6, [r4, #0]
 8002b42:	463e      	mov	r6, r7
 8002b44:	6165      	str	r5, [r4, #20]
 8002b46:	eba5 0509 	sub.w	r5, r5, r9
 8002b4a:	60a5      	str	r5, [r4, #8]
 8002b4c:	42be      	cmp	r6, r7
 8002b4e:	d900      	bls.n	8002b52 <__ssputs_r+0x72>
 8002b50:	463e      	mov	r6, r7
 8002b52:	4632      	mov	r2, r6
 8002b54:	4641      	mov	r1, r8
 8002b56:	6820      	ldr	r0, [r4, #0]
 8002b58:	f000 faac 	bl	80030b4 <memmove>
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	68a3      	ldr	r3, [r4, #8]
 8002b60:	1b9b      	subs	r3, r3, r6
 8002b62:	60a3      	str	r3, [r4, #8]
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	4433      	add	r3, r6
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b6e:	462a      	mov	r2, r5
 8002b70:	f000 fae6 	bl	8003140 <_realloc_r>
 8002b74:	4606      	mov	r6, r0
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d1e0      	bne.n	8002b3c <__ssputs_r+0x5c>
 8002b7a:	4650      	mov	r0, sl
 8002b7c:	6921      	ldr	r1, [r4, #16]
 8002b7e:	f7ff feb9 	bl	80028f4 <_free_r>
 8002b82:	230c      	movs	r3, #12
 8002b84:	f8ca 3000 	str.w	r3, [sl]
 8002b88:	89a3      	ldrh	r3, [r4, #12]
 8002b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b92:	81a3      	strh	r3, [r4, #12]
 8002b94:	e7e9      	b.n	8002b6a <__ssputs_r+0x8a>
	...

08002b98 <_svfiprintf_r>:
 8002b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b9c:	4698      	mov	r8, r3
 8002b9e:	898b      	ldrh	r3, [r1, #12]
 8002ba0:	4607      	mov	r7, r0
 8002ba2:	061b      	lsls	r3, r3, #24
 8002ba4:	460d      	mov	r5, r1
 8002ba6:	4614      	mov	r4, r2
 8002ba8:	b09d      	sub	sp, #116	@ 0x74
 8002baa:	d510      	bpl.n	8002bce <_svfiprintf_r+0x36>
 8002bac:	690b      	ldr	r3, [r1, #16]
 8002bae:	b973      	cbnz	r3, 8002bce <_svfiprintf_r+0x36>
 8002bb0:	2140      	movs	r1, #64	@ 0x40
 8002bb2:	f7ff ff09 	bl	80029c8 <_malloc_r>
 8002bb6:	6028      	str	r0, [r5, #0]
 8002bb8:	6128      	str	r0, [r5, #16]
 8002bba:	b930      	cbnz	r0, 8002bca <_svfiprintf_r+0x32>
 8002bbc:	230c      	movs	r3, #12
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	b01d      	add	sp, #116	@ 0x74
 8002bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bca:	2340      	movs	r3, #64	@ 0x40
 8002bcc:	616b      	str	r3, [r5, #20]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002bd8:	2330      	movs	r3, #48	@ 0x30
 8002bda:	f04f 0901 	mov.w	r9, #1
 8002bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8002be2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002d7c <_svfiprintf_r+0x1e4>
 8002be6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002bea:	4623      	mov	r3, r4
 8002bec:	469a      	mov	sl, r3
 8002bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bf2:	b10a      	cbz	r2, 8002bf8 <_svfiprintf_r+0x60>
 8002bf4:	2a25      	cmp	r2, #37	@ 0x25
 8002bf6:	d1f9      	bne.n	8002bec <_svfiprintf_r+0x54>
 8002bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8002bfc:	d00b      	beq.n	8002c16 <_svfiprintf_r+0x7e>
 8002bfe:	465b      	mov	r3, fp
 8002c00:	4622      	mov	r2, r4
 8002c02:	4629      	mov	r1, r5
 8002c04:	4638      	mov	r0, r7
 8002c06:	f7ff ff6b 	bl	8002ae0 <__ssputs_r>
 8002c0a:	3001      	adds	r0, #1
 8002c0c:	f000 80a7 	beq.w	8002d5e <_svfiprintf_r+0x1c6>
 8002c10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002c12:	445a      	add	r2, fp
 8002c14:	9209      	str	r2, [sp, #36]	@ 0x24
 8002c16:	f89a 3000 	ldrb.w	r3, [sl]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 809f 	beq.w	8002d5e <_svfiprintf_r+0x1c6>
 8002c20:	2300      	movs	r3, #0
 8002c22:	f04f 32ff 	mov.w	r2, #4294967295
 8002c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c2a:	f10a 0a01 	add.w	sl, sl, #1
 8002c2e:	9304      	str	r3, [sp, #16]
 8002c30:	9307      	str	r3, [sp, #28]
 8002c32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002c36:	931a      	str	r3, [sp, #104]	@ 0x68
 8002c38:	4654      	mov	r4, sl
 8002c3a:	2205      	movs	r2, #5
 8002c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c40:	484e      	ldr	r0, [pc, #312]	@ (8002d7c <_svfiprintf_r+0x1e4>)
 8002c42:	f000 fa61 	bl	8003108 <memchr>
 8002c46:	9a04      	ldr	r2, [sp, #16]
 8002c48:	b9d8      	cbnz	r0, 8002c82 <_svfiprintf_r+0xea>
 8002c4a:	06d0      	lsls	r0, r2, #27
 8002c4c:	bf44      	itt	mi
 8002c4e:	2320      	movmi	r3, #32
 8002c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c54:	0711      	lsls	r1, r2, #28
 8002c56:	bf44      	itt	mi
 8002c58:	232b      	movmi	r3, #43	@ 0x2b
 8002c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8002c62:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c64:	d015      	beq.n	8002c92 <_svfiprintf_r+0xfa>
 8002c66:	4654      	mov	r4, sl
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f04f 0c0a 	mov.w	ip, #10
 8002c6e:	9a07      	ldr	r2, [sp, #28]
 8002c70:	4621      	mov	r1, r4
 8002c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c76:	3b30      	subs	r3, #48	@ 0x30
 8002c78:	2b09      	cmp	r3, #9
 8002c7a:	d94b      	bls.n	8002d14 <_svfiprintf_r+0x17c>
 8002c7c:	b1b0      	cbz	r0, 8002cac <_svfiprintf_r+0x114>
 8002c7e:	9207      	str	r2, [sp, #28]
 8002c80:	e014      	b.n	8002cac <_svfiprintf_r+0x114>
 8002c82:	eba0 0308 	sub.w	r3, r0, r8
 8002c86:	fa09 f303 	lsl.w	r3, r9, r3
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	46a2      	mov	sl, r4
 8002c8e:	9304      	str	r3, [sp, #16]
 8002c90:	e7d2      	b.n	8002c38 <_svfiprintf_r+0xa0>
 8002c92:	9b03      	ldr	r3, [sp, #12]
 8002c94:	1d19      	adds	r1, r3, #4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	9103      	str	r1, [sp, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bfbb      	ittet	lt
 8002c9e:	425b      	neglt	r3, r3
 8002ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8002ca4:	9307      	strge	r3, [sp, #28]
 8002ca6:	9307      	strlt	r3, [sp, #28]
 8002ca8:	bfb8      	it	lt
 8002caa:	9204      	strlt	r2, [sp, #16]
 8002cac:	7823      	ldrb	r3, [r4, #0]
 8002cae:	2b2e      	cmp	r3, #46	@ 0x2e
 8002cb0:	d10a      	bne.n	8002cc8 <_svfiprintf_r+0x130>
 8002cb2:	7863      	ldrb	r3, [r4, #1]
 8002cb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cb6:	d132      	bne.n	8002d1e <_svfiprintf_r+0x186>
 8002cb8:	9b03      	ldr	r3, [sp, #12]
 8002cba:	3402      	adds	r4, #2
 8002cbc:	1d1a      	adds	r2, r3, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	9203      	str	r2, [sp, #12]
 8002cc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002cc6:	9305      	str	r3, [sp, #20]
 8002cc8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002d80 <_svfiprintf_r+0x1e8>
 8002ccc:	2203      	movs	r2, #3
 8002cce:	4650      	mov	r0, sl
 8002cd0:	7821      	ldrb	r1, [r4, #0]
 8002cd2:	f000 fa19 	bl	8003108 <memchr>
 8002cd6:	b138      	cbz	r0, 8002ce8 <_svfiprintf_r+0x150>
 8002cd8:	2240      	movs	r2, #64	@ 0x40
 8002cda:	9b04      	ldr	r3, [sp, #16]
 8002cdc:	eba0 000a 	sub.w	r0, r0, sl
 8002ce0:	4082      	lsls	r2, r0
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	3401      	adds	r4, #1
 8002ce6:	9304      	str	r3, [sp, #16]
 8002ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cec:	2206      	movs	r2, #6
 8002cee:	4825      	ldr	r0, [pc, #148]	@ (8002d84 <_svfiprintf_r+0x1ec>)
 8002cf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002cf4:	f000 fa08 	bl	8003108 <memchr>
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	d036      	beq.n	8002d6a <_svfiprintf_r+0x1d2>
 8002cfc:	4b22      	ldr	r3, [pc, #136]	@ (8002d88 <_svfiprintf_r+0x1f0>)
 8002cfe:	bb1b      	cbnz	r3, 8002d48 <_svfiprintf_r+0x1b0>
 8002d00:	9b03      	ldr	r3, [sp, #12]
 8002d02:	3307      	adds	r3, #7
 8002d04:	f023 0307 	bic.w	r3, r3, #7
 8002d08:	3308      	adds	r3, #8
 8002d0a:	9303      	str	r3, [sp, #12]
 8002d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d0e:	4433      	add	r3, r6
 8002d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d12:	e76a      	b.n	8002bea <_svfiprintf_r+0x52>
 8002d14:	460c      	mov	r4, r1
 8002d16:	2001      	movs	r0, #1
 8002d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d1c:	e7a8      	b.n	8002c70 <_svfiprintf_r+0xd8>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f04f 0c0a 	mov.w	ip, #10
 8002d24:	4619      	mov	r1, r3
 8002d26:	3401      	adds	r4, #1
 8002d28:	9305      	str	r3, [sp, #20]
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d30:	3a30      	subs	r2, #48	@ 0x30
 8002d32:	2a09      	cmp	r2, #9
 8002d34:	d903      	bls.n	8002d3e <_svfiprintf_r+0x1a6>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0c6      	beq.n	8002cc8 <_svfiprintf_r+0x130>
 8002d3a:	9105      	str	r1, [sp, #20]
 8002d3c:	e7c4      	b.n	8002cc8 <_svfiprintf_r+0x130>
 8002d3e:	4604      	mov	r4, r0
 8002d40:	2301      	movs	r3, #1
 8002d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d46:	e7f0      	b.n	8002d2a <_svfiprintf_r+0x192>
 8002d48:	ab03      	add	r3, sp, #12
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	462a      	mov	r2, r5
 8002d4e:	4638      	mov	r0, r7
 8002d50:	4b0e      	ldr	r3, [pc, #56]	@ (8002d8c <_svfiprintf_r+0x1f4>)
 8002d52:	a904      	add	r1, sp, #16
 8002d54:	f3af 8000 	nop.w
 8002d58:	1c42      	adds	r2, r0, #1
 8002d5a:	4606      	mov	r6, r0
 8002d5c:	d1d6      	bne.n	8002d0c <_svfiprintf_r+0x174>
 8002d5e:	89ab      	ldrh	r3, [r5, #12]
 8002d60:	065b      	lsls	r3, r3, #25
 8002d62:	f53f af2d 	bmi.w	8002bc0 <_svfiprintf_r+0x28>
 8002d66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002d68:	e72c      	b.n	8002bc4 <_svfiprintf_r+0x2c>
 8002d6a:	ab03      	add	r3, sp, #12
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	462a      	mov	r2, r5
 8002d70:	4638      	mov	r0, r7
 8002d72:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <_svfiprintf_r+0x1f4>)
 8002d74:	a904      	add	r1, sp, #16
 8002d76:	f000 f87d 	bl	8002e74 <_printf_i>
 8002d7a:	e7ed      	b.n	8002d58 <_svfiprintf_r+0x1c0>
 8002d7c:	08003252 	.word	0x08003252
 8002d80:	08003258 	.word	0x08003258
 8002d84:	0800325c 	.word	0x0800325c
 8002d88:	00000000 	.word	0x00000000
 8002d8c:	08002ae1 	.word	0x08002ae1

08002d90 <_printf_common>:
 8002d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d94:	4616      	mov	r6, r2
 8002d96:	4698      	mov	r8, r3
 8002d98:	688a      	ldr	r2, [r1, #8]
 8002d9a:	690b      	ldr	r3, [r1, #16]
 8002d9c:	4607      	mov	r7, r0
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	bfb8      	it	lt
 8002da2:	4613      	movlt	r3, r2
 8002da4:	6033      	str	r3, [r6, #0]
 8002da6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002daa:	460c      	mov	r4, r1
 8002dac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002db0:	b10a      	cbz	r2, 8002db6 <_printf_common+0x26>
 8002db2:	3301      	adds	r3, #1
 8002db4:	6033      	str	r3, [r6, #0]
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	0699      	lsls	r1, r3, #26
 8002dba:	bf42      	ittt	mi
 8002dbc:	6833      	ldrmi	r3, [r6, #0]
 8002dbe:	3302      	addmi	r3, #2
 8002dc0:	6033      	strmi	r3, [r6, #0]
 8002dc2:	6825      	ldr	r5, [r4, #0]
 8002dc4:	f015 0506 	ands.w	r5, r5, #6
 8002dc8:	d106      	bne.n	8002dd8 <_printf_common+0x48>
 8002dca:	f104 0a19 	add.w	sl, r4, #25
 8002dce:	68e3      	ldr	r3, [r4, #12]
 8002dd0:	6832      	ldr	r2, [r6, #0]
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	42ab      	cmp	r3, r5
 8002dd6:	dc2b      	bgt.n	8002e30 <_printf_common+0xa0>
 8002dd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ddc:	6822      	ldr	r2, [r4, #0]
 8002dde:	3b00      	subs	r3, #0
 8002de0:	bf18      	it	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	0692      	lsls	r2, r2, #26
 8002de6:	d430      	bmi.n	8002e4a <_printf_common+0xba>
 8002de8:	4641      	mov	r1, r8
 8002dea:	4638      	mov	r0, r7
 8002dec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002df0:	47c8      	blx	r9
 8002df2:	3001      	adds	r0, #1
 8002df4:	d023      	beq.n	8002e3e <_printf_common+0xae>
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	6922      	ldr	r2, [r4, #16]
 8002dfa:	f003 0306 	and.w	r3, r3, #6
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	bf14      	ite	ne
 8002e02:	2500      	movne	r5, #0
 8002e04:	6833      	ldreq	r3, [r6, #0]
 8002e06:	f04f 0600 	mov.w	r6, #0
 8002e0a:	bf08      	it	eq
 8002e0c:	68e5      	ldreq	r5, [r4, #12]
 8002e0e:	f104 041a 	add.w	r4, r4, #26
 8002e12:	bf08      	it	eq
 8002e14:	1aed      	subeq	r5, r5, r3
 8002e16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002e1a:	bf08      	it	eq
 8002e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e20:	4293      	cmp	r3, r2
 8002e22:	bfc4      	itt	gt
 8002e24:	1a9b      	subgt	r3, r3, r2
 8002e26:	18ed      	addgt	r5, r5, r3
 8002e28:	42b5      	cmp	r5, r6
 8002e2a:	d11a      	bne.n	8002e62 <_printf_common+0xd2>
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	e008      	b.n	8002e42 <_printf_common+0xb2>
 8002e30:	2301      	movs	r3, #1
 8002e32:	4652      	mov	r2, sl
 8002e34:	4641      	mov	r1, r8
 8002e36:	4638      	mov	r0, r7
 8002e38:	47c8      	blx	r9
 8002e3a:	3001      	adds	r0, #1
 8002e3c:	d103      	bne.n	8002e46 <_printf_common+0xb6>
 8002e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e46:	3501      	adds	r5, #1
 8002e48:	e7c1      	b.n	8002dce <_printf_common+0x3e>
 8002e4a:	2030      	movs	r0, #48	@ 0x30
 8002e4c:	18e1      	adds	r1, r4, r3
 8002e4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002e58:	4422      	add	r2, r4
 8002e5a:	3302      	adds	r3, #2
 8002e5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002e60:	e7c2      	b.n	8002de8 <_printf_common+0x58>
 8002e62:	2301      	movs	r3, #1
 8002e64:	4622      	mov	r2, r4
 8002e66:	4641      	mov	r1, r8
 8002e68:	4638      	mov	r0, r7
 8002e6a:	47c8      	blx	r9
 8002e6c:	3001      	adds	r0, #1
 8002e6e:	d0e6      	beq.n	8002e3e <_printf_common+0xae>
 8002e70:	3601      	adds	r6, #1
 8002e72:	e7d9      	b.n	8002e28 <_printf_common+0x98>

08002e74 <_printf_i>:
 8002e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e78:	7e0f      	ldrb	r7, [r1, #24]
 8002e7a:	4691      	mov	r9, r2
 8002e7c:	2f78      	cmp	r7, #120	@ 0x78
 8002e7e:	4680      	mov	r8, r0
 8002e80:	460c      	mov	r4, r1
 8002e82:	469a      	mov	sl, r3
 8002e84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002e86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002e8a:	d807      	bhi.n	8002e9c <_printf_i+0x28>
 8002e8c:	2f62      	cmp	r7, #98	@ 0x62
 8002e8e:	d80a      	bhi.n	8002ea6 <_printf_i+0x32>
 8002e90:	2f00      	cmp	r7, #0
 8002e92:	f000 80d3 	beq.w	800303c <_printf_i+0x1c8>
 8002e96:	2f58      	cmp	r7, #88	@ 0x58
 8002e98:	f000 80ba 	beq.w	8003010 <_printf_i+0x19c>
 8002e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ea0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002ea4:	e03a      	b.n	8002f1c <_printf_i+0xa8>
 8002ea6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002eaa:	2b15      	cmp	r3, #21
 8002eac:	d8f6      	bhi.n	8002e9c <_printf_i+0x28>
 8002eae:	a101      	add	r1, pc, #4	@ (adr r1, 8002eb4 <_printf_i+0x40>)
 8002eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002eb4:	08002f0d 	.word	0x08002f0d
 8002eb8:	08002f21 	.word	0x08002f21
 8002ebc:	08002e9d 	.word	0x08002e9d
 8002ec0:	08002e9d 	.word	0x08002e9d
 8002ec4:	08002e9d 	.word	0x08002e9d
 8002ec8:	08002e9d 	.word	0x08002e9d
 8002ecc:	08002f21 	.word	0x08002f21
 8002ed0:	08002e9d 	.word	0x08002e9d
 8002ed4:	08002e9d 	.word	0x08002e9d
 8002ed8:	08002e9d 	.word	0x08002e9d
 8002edc:	08002e9d 	.word	0x08002e9d
 8002ee0:	08003023 	.word	0x08003023
 8002ee4:	08002f4b 	.word	0x08002f4b
 8002ee8:	08002fdd 	.word	0x08002fdd
 8002eec:	08002e9d 	.word	0x08002e9d
 8002ef0:	08002e9d 	.word	0x08002e9d
 8002ef4:	08003045 	.word	0x08003045
 8002ef8:	08002e9d 	.word	0x08002e9d
 8002efc:	08002f4b 	.word	0x08002f4b
 8002f00:	08002e9d 	.word	0x08002e9d
 8002f04:	08002e9d 	.word	0x08002e9d
 8002f08:	08002fe5 	.word	0x08002fe5
 8002f0c:	6833      	ldr	r3, [r6, #0]
 8002f0e:	1d1a      	adds	r2, r3, #4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6032      	str	r2, [r6, #0]
 8002f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e09e      	b.n	800305e <_printf_i+0x1ea>
 8002f20:	6833      	ldr	r3, [r6, #0]
 8002f22:	6820      	ldr	r0, [r4, #0]
 8002f24:	1d19      	adds	r1, r3, #4
 8002f26:	6031      	str	r1, [r6, #0]
 8002f28:	0606      	lsls	r6, r0, #24
 8002f2a:	d501      	bpl.n	8002f30 <_printf_i+0xbc>
 8002f2c:	681d      	ldr	r5, [r3, #0]
 8002f2e:	e003      	b.n	8002f38 <_printf_i+0xc4>
 8002f30:	0645      	lsls	r5, r0, #25
 8002f32:	d5fb      	bpl.n	8002f2c <_printf_i+0xb8>
 8002f34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002f38:	2d00      	cmp	r5, #0
 8002f3a:	da03      	bge.n	8002f44 <_printf_i+0xd0>
 8002f3c:	232d      	movs	r3, #45	@ 0x2d
 8002f3e:	426d      	negs	r5, r5
 8002f40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f44:	230a      	movs	r3, #10
 8002f46:	4859      	ldr	r0, [pc, #356]	@ (80030ac <_printf_i+0x238>)
 8002f48:	e011      	b.n	8002f6e <_printf_i+0xfa>
 8002f4a:	6821      	ldr	r1, [r4, #0]
 8002f4c:	6833      	ldr	r3, [r6, #0]
 8002f4e:	0608      	lsls	r0, r1, #24
 8002f50:	f853 5b04 	ldr.w	r5, [r3], #4
 8002f54:	d402      	bmi.n	8002f5c <_printf_i+0xe8>
 8002f56:	0649      	lsls	r1, r1, #25
 8002f58:	bf48      	it	mi
 8002f5a:	b2ad      	uxthmi	r5, r5
 8002f5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002f5e:	6033      	str	r3, [r6, #0]
 8002f60:	bf14      	ite	ne
 8002f62:	230a      	movne	r3, #10
 8002f64:	2308      	moveq	r3, #8
 8002f66:	4851      	ldr	r0, [pc, #324]	@ (80030ac <_printf_i+0x238>)
 8002f68:	2100      	movs	r1, #0
 8002f6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002f6e:	6866      	ldr	r6, [r4, #4]
 8002f70:	2e00      	cmp	r6, #0
 8002f72:	bfa8      	it	ge
 8002f74:	6821      	ldrge	r1, [r4, #0]
 8002f76:	60a6      	str	r6, [r4, #8]
 8002f78:	bfa4      	itt	ge
 8002f7a:	f021 0104 	bicge.w	r1, r1, #4
 8002f7e:	6021      	strge	r1, [r4, #0]
 8002f80:	b90d      	cbnz	r5, 8002f86 <_printf_i+0x112>
 8002f82:	2e00      	cmp	r6, #0
 8002f84:	d04b      	beq.n	800301e <_printf_i+0x1aa>
 8002f86:	4616      	mov	r6, r2
 8002f88:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f8c:	fb03 5711 	mls	r7, r3, r1, r5
 8002f90:	5dc7      	ldrb	r7, [r0, r7]
 8002f92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f96:	462f      	mov	r7, r5
 8002f98:	42bb      	cmp	r3, r7
 8002f9a:	460d      	mov	r5, r1
 8002f9c:	d9f4      	bls.n	8002f88 <_printf_i+0x114>
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d10b      	bne.n	8002fba <_printf_i+0x146>
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	07df      	lsls	r7, r3, #31
 8002fa6:	d508      	bpl.n	8002fba <_printf_i+0x146>
 8002fa8:	6923      	ldr	r3, [r4, #16]
 8002faa:	6861      	ldr	r1, [r4, #4]
 8002fac:	4299      	cmp	r1, r3
 8002fae:	bfde      	ittt	le
 8002fb0:	2330      	movle	r3, #48	@ 0x30
 8002fb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002fb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002fba:	1b92      	subs	r2, r2, r6
 8002fbc:	6122      	str	r2, [r4, #16]
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	f8cd a000 	str.w	sl, [sp]
 8002fc8:	aa03      	add	r2, sp, #12
 8002fca:	f7ff fee1 	bl	8002d90 <_printf_common>
 8002fce:	3001      	adds	r0, #1
 8002fd0:	d14a      	bne.n	8003068 <_printf_i+0x1f4>
 8002fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd6:	b004      	add	sp, #16
 8002fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	f043 0320 	orr.w	r3, r3, #32
 8002fe2:	6023      	str	r3, [r4, #0]
 8002fe4:	2778      	movs	r7, #120	@ 0x78
 8002fe6:	4832      	ldr	r0, [pc, #200]	@ (80030b0 <_printf_i+0x23c>)
 8002fe8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	6831      	ldr	r1, [r6, #0]
 8002ff0:	061f      	lsls	r7, r3, #24
 8002ff2:	f851 5b04 	ldr.w	r5, [r1], #4
 8002ff6:	d402      	bmi.n	8002ffe <_printf_i+0x18a>
 8002ff8:	065f      	lsls	r7, r3, #25
 8002ffa:	bf48      	it	mi
 8002ffc:	b2ad      	uxthmi	r5, r5
 8002ffe:	6031      	str	r1, [r6, #0]
 8003000:	07d9      	lsls	r1, r3, #31
 8003002:	bf44      	itt	mi
 8003004:	f043 0320 	orrmi.w	r3, r3, #32
 8003008:	6023      	strmi	r3, [r4, #0]
 800300a:	b11d      	cbz	r5, 8003014 <_printf_i+0x1a0>
 800300c:	2310      	movs	r3, #16
 800300e:	e7ab      	b.n	8002f68 <_printf_i+0xf4>
 8003010:	4826      	ldr	r0, [pc, #152]	@ (80030ac <_printf_i+0x238>)
 8003012:	e7e9      	b.n	8002fe8 <_printf_i+0x174>
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	f023 0320 	bic.w	r3, r3, #32
 800301a:	6023      	str	r3, [r4, #0]
 800301c:	e7f6      	b.n	800300c <_printf_i+0x198>
 800301e:	4616      	mov	r6, r2
 8003020:	e7bd      	b.n	8002f9e <_printf_i+0x12a>
 8003022:	6833      	ldr	r3, [r6, #0]
 8003024:	6825      	ldr	r5, [r4, #0]
 8003026:	1d18      	adds	r0, r3, #4
 8003028:	6961      	ldr	r1, [r4, #20]
 800302a:	6030      	str	r0, [r6, #0]
 800302c:	062e      	lsls	r6, r5, #24
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	d501      	bpl.n	8003036 <_printf_i+0x1c2>
 8003032:	6019      	str	r1, [r3, #0]
 8003034:	e002      	b.n	800303c <_printf_i+0x1c8>
 8003036:	0668      	lsls	r0, r5, #25
 8003038:	d5fb      	bpl.n	8003032 <_printf_i+0x1be>
 800303a:	8019      	strh	r1, [r3, #0]
 800303c:	2300      	movs	r3, #0
 800303e:	4616      	mov	r6, r2
 8003040:	6123      	str	r3, [r4, #16]
 8003042:	e7bc      	b.n	8002fbe <_printf_i+0x14a>
 8003044:	6833      	ldr	r3, [r6, #0]
 8003046:	2100      	movs	r1, #0
 8003048:	1d1a      	adds	r2, r3, #4
 800304a:	6032      	str	r2, [r6, #0]
 800304c:	681e      	ldr	r6, [r3, #0]
 800304e:	6862      	ldr	r2, [r4, #4]
 8003050:	4630      	mov	r0, r6
 8003052:	f000 f859 	bl	8003108 <memchr>
 8003056:	b108      	cbz	r0, 800305c <_printf_i+0x1e8>
 8003058:	1b80      	subs	r0, r0, r6
 800305a:	6060      	str	r0, [r4, #4]
 800305c:	6863      	ldr	r3, [r4, #4]
 800305e:	6123      	str	r3, [r4, #16]
 8003060:	2300      	movs	r3, #0
 8003062:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003066:	e7aa      	b.n	8002fbe <_printf_i+0x14a>
 8003068:	4632      	mov	r2, r6
 800306a:	4649      	mov	r1, r9
 800306c:	4640      	mov	r0, r8
 800306e:	6923      	ldr	r3, [r4, #16]
 8003070:	47d0      	blx	sl
 8003072:	3001      	adds	r0, #1
 8003074:	d0ad      	beq.n	8002fd2 <_printf_i+0x15e>
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	079b      	lsls	r3, r3, #30
 800307a:	d413      	bmi.n	80030a4 <_printf_i+0x230>
 800307c:	68e0      	ldr	r0, [r4, #12]
 800307e:	9b03      	ldr	r3, [sp, #12]
 8003080:	4298      	cmp	r0, r3
 8003082:	bfb8      	it	lt
 8003084:	4618      	movlt	r0, r3
 8003086:	e7a6      	b.n	8002fd6 <_printf_i+0x162>
 8003088:	2301      	movs	r3, #1
 800308a:	4632      	mov	r2, r6
 800308c:	4649      	mov	r1, r9
 800308e:	4640      	mov	r0, r8
 8003090:	47d0      	blx	sl
 8003092:	3001      	adds	r0, #1
 8003094:	d09d      	beq.n	8002fd2 <_printf_i+0x15e>
 8003096:	3501      	adds	r5, #1
 8003098:	68e3      	ldr	r3, [r4, #12]
 800309a:	9903      	ldr	r1, [sp, #12]
 800309c:	1a5b      	subs	r3, r3, r1
 800309e:	42ab      	cmp	r3, r5
 80030a0:	dcf2      	bgt.n	8003088 <_printf_i+0x214>
 80030a2:	e7eb      	b.n	800307c <_printf_i+0x208>
 80030a4:	2500      	movs	r5, #0
 80030a6:	f104 0619 	add.w	r6, r4, #25
 80030aa:	e7f5      	b.n	8003098 <_printf_i+0x224>
 80030ac:	08003263 	.word	0x08003263
 80030b0:	08003274 	.word	0x08003274

080030b4 <memmove>:
 80030b4:	4288      	cmp	r0, r1
 80030b6:	b510      	push	{r4, lr}
 80030b8:	eb01 0402 	add.w	r4, r1, r2
 80030bc:	d902      	bls.n	80030c4 <memmove+0x10>
 80030be:	4284      	cmp	r4, r0
 80030c0:	4623      	mov	r3, r4
 80030c2:	d807      	bhi.n	80030d4 <memmove+0x20>
 80030c4:	1e43      	subs	r3, r0, #1
 80030c6:	42a1      	cmp	r1, r4
 80030c8:	d008      	beq.n	80030dc <memmove+0x28>
 80030ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030d2:	e7f8      	b.n	80030c6 <memmove+0x12>
 80030d4:	4601      	mov	r1, r0
 80030d6:	4402      	add	r2, r0
 80030d8:	428a      	cmp	r2, r1
 80030da:	d100      	bne.n	80030de <memmove+0x2a>
 80030dc:	bd10      	pop	{r4, pc}
 80030de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80030e6:	e7f7      	b.n	80030d8 <memmove+0x24>

080030e8 <_sbrk_r>:
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	2300      	movs	r3, #0
 80030ec:	4d05      	ldr	r5, [pc, #20]	@ (8003104 <_sbrk_r+0x1c>)
 80030ee:	4604      	mov	r4, r0
 80030f0:	4608      	mov	r0, r1
 80030f2:	602b      	str	r3, [r5, #0]
 80030f4:	f7fd fe4c 	bl	8000d90 <_sbrk>
 80030f8:	1c43      	adds	r3, r0, #1
 80030fa:	d102      	bne.n	8003102 <_sbrk_r+0x1a>
 80030fc:	682b      	ldr	r3, [r5, #0]
 80030fe:	b103      	cbz	r3, 8003102 <_sbrk_r+0x1a>
 8003100:	6023      	str	r3, [r4, #0]
 8003102:	bd38      	pop	{r3, r4, r5, pc}
 8003104:	20000258 	.word	0x20000258

08003108 <memchr>:
 8003108:	4603      	mov	r3, r0
 800310a:	b510      	push	{r4, lr}
 800310c:	b2c9      	uxtb	r1, r1
 800310e:	4402      	add	r2, r0
 8003110:	4293      	cmp	r3, r2
 8003112:	4618      	mov	r0, r3
 8003114:	d101      	bne.n	800311a <memchr+0x12>
 8003116:	2000      	movs	r0, #0
 8003118:	e003      	b.n	8003122 <memchr+0x1a>
 800311a:	7804      	ldrb	r4, [r0, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	428c      	cmp	r4, r1
 8003120:	d1f6      	bne.n	8003110 <memchr+0x8>
 8003122:	bd10      	pop	{r4, pc}

08003124 <memcpy>:
 8003124:	440a      	add	r2, r1
 8003126:	4291      	cmp	r1, r2
 8003128:	f100 33ff 	add.w	r3, r0, #4294967295
 800312c:	d100      	bne.n	8003130 <memcpy+0xc>
 800312e:	4770      	bx	lr
 8003130:	b510      	push	{r4, lr}
 8003132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003136:	4291      	cmp	r1, r2
 8003138:	f803 4f01 	strb.w	r4, [r3, #1]!
 800313c:	d1f9      	bne.n	8003132 <memcpy+0xe>
 800313e:	bd10      	pop	{r4, pc}

08003140 <_realloc_r>:
 8003140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003144:	4680      	mov	r8, r0
 8003146:	4615      	mov	r5, r2
 8003148:	460c      	mov	r4, r1
 800314a:	b921      	cbnz	r1, 8003156 <_realloc_r+0x16>
 800314c:	4611      	mov	r1, r2
 800314e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003152:	f7ff bc39 	b.w	80029c8 <_malloc_r>
 8003156:	b92a      	cbnz	r2, 8003164 <_realloc_r+0x24>
 8003158:	f7ff fbcc 	bl	80028f4 <_free_r>
 800315c:	2400      	movs	r4, #0
 800315e:	4620      	mov	r0, r4
 8003160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003164:	f000 f81a 	bl	800319c <_malloc_usable_size_r>
 8003168:	4285      	cmp	r5, r0
 800316a:	4606      	mov	r6, r0
 800316c:	d802      	bhi.n	8003174 <_realloc_r+0x34>
 800316e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003172:	d8f4      	bhi.n	800315e <_realloc_r+0x1e>
 8003174:	4629      	mov	r1, r5
 8003176:	4640      	mov	r0, r8
 8003178:	f7ff fc26 	bl	80029c8 <_malloc_r>
 800317c:	4607      	mov	r7, r0
 800317e:	2800      	cmp	r0, #0
 8003180:	d0ec      	beq.n	800315c <_realloc_r+0x1c>
 8003182:	42b5      	cmp	r5, r6
 8003184:	462a      	mov	r2, r5
 8003186:	4621      	mov	r1, r4
 8003188:	bf28      	it	cs
 800318a:	4632      	movcs	r2, r6
 800318c:	f7ff ffca 	bl	8003124 <memcpy>
 8003190:	4621      	mov	r1, r4
 8003192:	4640      	mov	r0, r8
 8003194:	f7ff fbae 	bl	80028f4 <_free_r>
 8003198:	463c      	mov	r4, r7
 800319a:	e7e0      	b.n	800315e <_realloc_r+0x1e>

0800319c <_malloc_usable_size_r>:
 800319c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031a0:	1f18      	subs	r0, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bfbc      	itt	lt
 80031a6:	580b      	ldrlt	r3, [r1, r0]
 80031a8:	18c0      	addlt	r0, r0, r3
 80031aa:	4770      	bx	lr

080031ac <_init>:
 80031ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ae:	bf00      	nop
 80031b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b2:	bc08      	pop	{r3}
 80031b4:	469e      	mov	lr, r3
 80031b6:	4770      	bx	lr

080031b8 <_fini>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	bf00      	nop
 80031bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031be:	bc08      	pop	{r3}
 80031c0:	469e      	mov	lr, r3
 80031c2:	4770      	bx	lr
